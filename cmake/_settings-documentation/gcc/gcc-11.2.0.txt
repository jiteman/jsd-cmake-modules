gcc (Ubuntu 11.2.0-19ubuntu1) 11.2.0
Copyright (C) 2021 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

The following options are language-independent:
  --completion=               Provide bash completion for options starting with provided string.
  --debug                     Same as -g.
  --dumpbase                  Same as -dumpbase.
  --dumpbase-ext              Same as -dumpbase-ext.
  --dumpdir                   Same as -dumpdir.
  --extra-warnings            Same as -Wextra.
  --help                      Display this information.
  --help=<class>              Display descriptions of a specific class of options.  <class> is one or
                              more of optimizers, target, warnings, undocumented, params.
  --optimize                  Same as -O.
  --output                    Same as -o.
  --output=                   Same as -o.
  --pedantic-errors           Same as -pedantic-errors.
  --profile                   Same as -p.
  --target-help               Alias for --help=target.
  --verbose                   Same as -v.
  --version                   This option lacks documentation.
  -Ofast                      Optimize for speed disregarding exact standards compliance.
  -Og                         Optimize for debugging experience rather than speed or size.
  -Os                         Optimize for space rather than speed.
  -W                          This switch is deprecated; use -Wextra instead.  Same as -Wextra.
  -Waggregate-return          Warn about returning structures, unions or arrays.
  -Waggressive-loop-optimizations Warn if a loop with constant number of iterations triggers
                              undefined behavior.
  -Wanalyzer-double-fclose    Warn about code paths in which a stdio FILE can be closed more than
                              once.
  -Wanalyzer-double-free      Warn about code paths in which a pointer can be freed more than once.
  -Wanalyzer-exposure-through-output-file Warn about code paths in which sensitive data is written to
                              a file.
  -Wanalyzer-file-leak        Warn about code paths in which a stdio FILE is not closed.
  -Wanalyzer-free-of-non-heap Warn about code paths in which a non-heap pointer is freed.
  -Wanalyzer-malloc-leak      Warn about code paths in which a heap-allocated pointer leaks.
  -Wanalyzer-mismatching-deallocation Warn about code paths in which the wrong deallocation function
                              is called.
  -Wanalyzer-null-argument    Warn about code paths in which NULL is passed to a must-not-be-NULL
                              function argument.
  -Wanalyzer-null-dereference Warn about code paths in which a NULL pointer is dereferenced.
  -Wanalyzer-possible-null-argument Warn about code paths in which a possibly-NULL value is passed to
                              a must-not-be-NULL function argument.
  -Wanalyzer-possible-null-dereference Warn about code paths in which a possibly-NULL pointer is
                              dereferenced.
  -Wanalyzer-shift-count-negative Warn about code paths in which a shift with negative count is
                              attempted.
  -Wanalyzer-shift-count-overflow Warn about code paths in which a shift with count >= width of type
                              is attempted.
  -Wanalyzer-stale-setjmp-buffer Warn about code paths in which a longjmp rewinds to a jmp_buf saved
                              in a stack frame that has returned.
  -Wanalyzer-tainted-array-index Warn about code paths in which an unsanitized value is used as an
                              array index.
  -Wanalyzer-too-complex      Warn if the code is too complicated for the analyzer to fully explore.
  -Wanalyzer-unsafe-call-within-signal-handler Warn about code paths in which an async-signal-unsafe
                              function is called from a signal handler.
  -Wanalyzer-use-after-free   Warn about code paths in which a freed value is used.
  -Wanalyzer-use-of-pointer-in-stale-stack-frame Warn about code paths in which a pointer to a stale
                              stack frame is used.
  -Wanalyzer-write-to-const   Warn about code paths which attempt to write to a const object.
  -Wanalyzer-write-to-string-literal Warn about code paths which attempt to write to a string literal.
  -Warray-bounds              Warn if an array is accessed out of bounds.
  -Warray-bounds=<0,2>        Warn if an array is accessed out of bounds.
  -Wattribute-alias           Warn about type safety and similar errors and mismatches in
                              declarations with alias attributes.  Same as -Wattribute-alias=.
  -Wattribute-alias=<0,2>     Warn about type safety and similar errors and mismatches in
                              declarations with alias attributes.
  -Wattribute-warning         Warn about uses of __attribute__((warning)) declarations.
  -Wattributes                Warn about inappropriate attribute usage.
  -Wcannot-profile            Warn when profiling instrumentation was requested, but could not be
                              applied to a certain function.
  -Wcast-align                Warn about pointer casts which increase alignment.
  -Wcast-align=strict         Warn about pointer casts which increase alignment.
  -Wcoverage-mismatch         Warn in case profiles in -fprofile-use do not match.
  -Wdeprecated-declarations   Warn about uses of __attribute__((deprecated)) declarations.
  -Wdisabled-optimization     Warn when an optimization pass is disabled.
  -Werror=                    Treat specified warning as error.
  -Wfatal-errors              Exit on the first error occurred.
  -Wframe-larger-than=<byte-size> Warn if a function's stack frame requires in excess of <byte-size>.
  -Wfree-nonheap-object       Warn when attempting to free a non-heap object.
  -Whsa                       Does nothing.  Preserved for backward compatibility.
  -Wimplicit-fallthrough      Same as -Wimplicit-fallthrough=3 (or, in negated form, -Wimplicit-
                              fallthrough=0).
  -Wimplicit-fallthrough=<0,5> Warn when a switch case falls through.
  -Winline                    Warn when an inlined function cannot be inlined.
  -Winvalid-memory-model      Warn when an atomic memory model parameter is known to be outside the
                              valid range.
  -Wlarger-than-              Same as -Wlarger-than=.
  -Wlarger-than=<byte-size>   Warn if an object's size exceeds <byte-size>.
  -Wlto-type-mismatch         During link time optimization warn about mismatched types of global
                              declarations.
  -Wmissing-noreturn          Same as -Wsuggest-attribute=noreturn.
  -Wmissing-profile           Warn in case profiles in -fprofile-use do not exist.
  -Wno-frame-larger-than      Disable -Wframe-larger-than= warning.  Equivalent to -Wframe-larger-
                              than=<SIZE_MAX> or larger.  Same as -Wframe-larger-than=.
  -Wno-larger-than            Disable -Wlarger-than= warning.  Equivalent to -Wlarger-than=<SIZE_MAX>
                              or larger.  Same as -Wlarger-than=.
  -Wno-stack-usage            Disable Wstack-usage= warning.  Equivalent to Wstack-usage=<SIZE_MAX>
                              or larger.  Same as -Wstack-usage=.
  -Wnull-dereference          Warn if dereferencing a NULL pointer may lead to erroneous or undefined
                              behavior.
  -Wodr                       Warn about some C++ One Definition Rule violations during link time
                              optimization.
  -Woverflow                  Warn about overflow in arithmetic expressions.
  -Wpacked                    Warn when the packed attribute has no effect on struct layout.
  -Wpadded                    Warn when padding is required to align structure members.
  -Wreturn-local-addr         Warn about returning a pointer/reference to a local or temporary
                              variable.
  -Wshadow                    Warn when one variable shadows another.  Same as -Wshadow=global.
  -Wshadow-compatible-local   Same as -Wshadow=compatible-local.
  -Wshadow-local              Same as -Wshadow=local.
  -Wshadow=compatible-local   Warn when one local variable shadows another local variable or
                              parameter of compatible type.
  -Wshadow=global             Warn when one variable shadows another (globally).  Same as -Wshadow.
  -Wshadow=local              Warn when one local variable shadows another local variable or
                              parameter.
  -Wstack-protector           Warn when not issuing stack smashing protection for some reason.
  -Wstack-usage=<byte-size>   Warn if stack usage might exceed <byte-size>.
  -Wstrict-aliasing           Warn about code which might break strict aliasing rules.
  -Wstrict-overflow           Warn about optimizations that assume that signed overflow is undefined.
  -Wsuggest-attribute=cold    Warn about functions which might be candidates for
                              __attribute__((cold)).
  -Wsuggest-attribute=const   Warn about functions which might be candidates for
                              __attribute__((const)).
  -Wsuggest-attribute=malloc  Warn about functions which might be candidates for
                              __attribute__((malloc)).
  -Wsuggest-attribute=noreturn Warn about functions which might be candidates for
                              __attribute__((noreturn)).
  -Wsuggest-attribute=pure    Warn about functions which might be candidates for
                              __attribute__((pure)).
  -Wsuggest-final-methods     Warn about C++ virtual methods where adding final keyword would improve
                              code quality.
  -Wsuggest-final-types       Warn about C++ polymorphic types where adding final keyword would
                              improve code quality.
  -Wswitch-unreachable        Warn about statements between switch's controlling expression and the
                              first case.
  -Wtrampolines               Warn whenever a trampoline is generated.
  -Wtsan                      Warn about unsupported features in ThreadSanitizer.
  -Wtype-limits               Warn if a comparison is always true or always false due to the limited
                              range of the data type.
  -Wunreachable-code          Does nothing. Preserved for backward compatibility.
  -Wunsafe-loop-optimizations Does nothing. Preserved for backward compatibility.
  -Wunused-but-set-parameter  Warn when a function parameter is only set, otherwise unused.
  -Wunused-but-set-variable   Warn when a variable is only set, otherwise unused.
  -Wunused-function           Warn when a function is unused.
  -Wunused-label              Warn when a label is unused.
  -Wunused-value              Warn when an expression value is unused.
  -Wvector-operation-performance Warn when a vector operation is compiled outside the SIMD.
  -aux-info <file>            Emit declaration information into <file>.
  -aux-info=                  Same as -aux-info.
  -dumpbase <file>            Set the file basename to be used for dumps.
  -dumpbase-ext               -dumpbase-ext .<ext>    Drop a trailing .<ext> from the dump basename
                              to name auxiliary output files.
  -dumpdir <dir>              Set the directory name to be used for dumps.
  -fPIC                       Generate position-independent code if possible (large mode).
  -fPIE                       Generate position-independent code for executables if possible (large
                              mode).
  -fabi-version=              The version of the C++ ABI in use.
  -faggressive-loop-optimizations Aggressively optimize loops using language constraints.
  -falign-functions           Align the start of functions.
  -falign-functions=          This option lacks documentation.
  -falign-jumps               Align labels which are only reached by jumping.
  -falign-jumps=              This option lacks documentation.
  -falign-labels              Align all labels.
  -falign-labels=             This option lacks documentation.
  -falign-loops               Align the start of loops.
  -falign-loops=              This option lacks documentation.
  -fallocation-dce            Tell DCE to remove unused C++ allocations.
  -fallow-store-data-races    Allow the compiler to introduce new data races on stores.
  -fanalyzer                  Enable static analysis pass.
  -fanalyzer-call-summaries   Approximate the effect of function calls to simplify analysis.
  -fanalyzer-checker=         Restrict the analyzer to run just the named checker.
  -fanalyzer-feasibility      Verify that paths are feasible when emitting diagnostics.
  -fanalyzer-fine-grained     Avoid combining multiple statements into one exploded edge.
  -fanalyzer-show-duplicate-count Issue a note when diagnostics are deduplicated.
  -fanalyzer-state-merge      Merge similar-enough states during analysis.
  -fanalyzer-state-purge      Purge unneeded state during analysis.
  -fanalyzer-transitivity     Enable transitivity of constraints during analysis.
  -fanalyzer-verbose-edges    Emit more verbose descriptions of control flow in diagnostics.
  -fanalyzer-verbose-state-changes Emit more verbose descriptions of state changes in diagnostics.
  -fanalyzer-verbosity=       Control which events are displayed in diagnostic paths.
  -fargument-alias            Does nothing. Preserved for backward compatibility.
  -fargument-noalias          Does nothing. Preserved for backward compatibility.
  -fargument-noalias-anything Does nothing. Preserved for backward compatibility.
  -fargument-noalias-global   Does nothing. Preserved for backward compatibility.
  -fasan-shadow-offset=<number> Use custom shadow memory offset.
  -fassociative-math          Allow optimization for floating-point arithmetic which may change the
                              result of the operation due to rounding.
  -fasynchronous-unwind-tables Generate unwind tables that are exact at each instruction boundary.
  -fauto-inc-dec              Generate auto-inc/dec instructions.
  -fauto-profile              Use sample profile information for call graph node weights. The default
                              profile file is fbdata.afdo in 'pwd'.
  -fauto-profile=             Use sample profile information for call graph node weights. The profile
                              file is specified in the argument.
  -fbit-tests                 Use bit tests for sufficiently large switch statements.
  -fbranch-count-reg          Replace add, compare, branch with branch on count register.
  -fbranch-probabilities      Use profiling information for branch probabilities.
  -fbranch-target-load-optimize Does nothing.  Preserved for backward compatibility.
  -fbranch-target-load-optimize2 Does nothing.  Preserved for backward compatibility.
  -fbtr-bb-exclusive          Does nothing.  Preserved for backward compatibility.
  -fcall-saved-<register>     Mark <register> as being preserved across functions.
  -fcall-used-<register>      Mark <register> as being corrupted by function calls.
  -fcaller-saves              Save registers around function calls.
  -fcallgraph-info            Output callgraph information on a per-file basis.
  -fcallgraph-info=           Output callgraph information on a per-file basis with decorations.
  -fcf-protection             Same as -fcf-protection=full.
  -fcf-protection=[full|branch|return|none|check] Instrument functions with checks to verify jump/
                              call/return control-flow transfer instructions have valid targets.
  -fcheck-data-deps           This switch is deprecated; do not use.
  -fcheck-new                 Check the return value of new in C++.
  -fchecking                  Perform internal consistency checkings.
  -fchecking=                 Perform internal consistency checkings.
  -fcode-hoisting             Enable code hoisting.
  -fcombine-stack-adjustments Looks for opportunities to reduce stack adjustments and stack
                              references.
  -fcommon                    Put uninitialized globals in the common section.
  -fcompare-debug-second      Run only the second compilation of -fcompare-debug.
  -fcompare-debug[=<opts>]    Compile with and without e.g. -gtoggle, and compare the final-insns
                              dump.
  -fcompare-elim              Perform comparison elimination after register allocation has finished.
  -fconserve-stack            Do not perform optimizations increasing noticeably stack usage.
  -fcprop-registers           Perform a register copy-propagation optimization pass.
  -fcrossjumping              Perform cross-jumping optimization.
  -fcse-follow-jumps          When running CSE, follow jumps to their targets.
  -fcse-skip-blocks           Does nothing.  Preserved for backward compatibility.
  -fcx-fortran-rules          Complex multiplication and division follow Fortran rules.
  -fcx-limited-range          Omit range reduction step when performing complex division.
  -fdata-sections             Place data items into their own section.
  -fdbg-cnt-list              List all available debugging counters with their limits and counts.
  -fdbg-cnt=<counter>[:<lower_limit1>-]<upper_limit1>[:<lower_limit2>-<upper_limit2>:...][,<counter>:...] Set
                              the debug counter limit.
  -fdce                       Use the RTL dead code elimination pass.
  -fdebug-prefix-map=<old>=<new> Map one directory name to another in debug information.
  -fdebug-types-section       Output .debug_types section when using DWARF v4 debuginfo.
  -fdefer-pop                 Defer popping functions args from stack until later.
  -fdelayed-branch            Attempt to fill delay slots of branch instructions.
  -fdelete-dead-exceptions    Delete dead instructions that may throw exceptions.
  -fdelete-null-pointer-checks Delete useless null pointer checks.
  -fdevirtualize              Try to convert virtual calls to direct ones.
  -fdevirtualize-at-ltrans    Stream extra data to support more aggressive devirtualization in LTO
                              local transformation mode.
  -fdevirtualize-speculatively Perform speculative devirtualization.
  -fdiagnostics-color         Same as -fdiagnostics-color=always (or, in negated form, -fdiagnostics-
                              color=never).
  -fdiagnostics-color=[never|always|auto] Colorize diagnostics.
  -fdiagnostics-column-origin=<number> Set the number of the first column.  The default is 1-based as
                              per GNU style, but some utilities may expect 0-based, for example.
  -fdiagnostics-column-unit=[display|byte] Select whether column numbers are output as display
                              columns (default) or raw bytes.
  -fdiagnostics-format=[text|json] Select output format.
  -fdiagnostics-generate-patch Print fix-it hints to stderr in unified diff format.
  -fdiagnostics-minimum-margin-width= Set minimum width of left margin of source code when showing
                              source.
  -fdiagnostics-parseable-fixits Print fix-it hints in machine-readable form.
  -fdiagnostics-path-format=  Specify how to print any control-flow path associated with a diagnostic.
  -fdiagnostics-plain-output  Turn off any diagnostics features that complicate the output, such as
                              line numbers, color, and warning URLs.
  -fdiagnostics-show-caret    Show the source line with a caret indicating the column.
  -fdiagnostics-show-cwe      Print CWE identifiers for diagnostic messages, where available.
  -fdiagnostics-show-labels   Show labels annotating ranges of source code when showing source.
  -fdiagnostics-show-line-numbers Show line numbers in the left margin when showing source.
  -fdiagnostics-show-location=[once|every-line] How often to emit source location at the beginning of
                              line-wrapped diagnostics.
  -fdiagnostics-show-option   Amend appropriate diagnostic messages with the command line option that
                              controls them.
  -fdiagnostics-show-path-depths Show stack depths of events in paths.
  -fdiagnostics-urls=[never|always|auto] Embed URLs in diagnostics.
  -fdisable-[tree|rtl|ipa]-<pass>=range1+range2 Disable an optimization pass.
  -fdse                       Use the RTL dead store elimination pass.
  -fdump-<type>               Dump various compiler internals to a file.
  -fdump-analyzer             Dump various analyzer internals to SRCFILE.analyzer.txt.
  -fdump-analyzer-callgraph   Dump analyzer-specific call graph information to a
                              SRCFILE.callgraph.dot file.
  -fdump-analyzer-exploded-graph Dump the analyzer exploded graph to a SRCFILE.eg.dot file.
  -fdump-analyzer-exploded-nodes Emit diagnostics showing the location of nodes in the exploded graph.
  -fdump-analyzer-exploded-nodes-2 Dump a textual representation of the exploded graph to
                              SRCFILE.eg.txt.
  -fdump-analyzer-exploded-nodes-3 Dump a textual representation of the exploded graph to SRCFILE.eg-
                              ID.txt.
  -fdump-analyzer-feasibility Dump various analyzer internals to SRCFILE.*.fg.dot and
                              SRCFILE.*.tg.dot.
  -fdump-analyzer-json        Dump analyzer-specific data to a SRCFILE.analyzer.json.gz file.
  -fdump-analyzer-state-purge Dump state-purging information to a SRCFILE.state-purge.dot file.
  -fdump-analyzer-stderr      Dump various analyzer internals to stderr.
  -fdump-analyzer-supergraph  Dump the analyzer supergraph to a SRCFILE.supergraph.dot file.
  -fdump-final-insns=filename Dump to filename the insns at the end of translation.
  -fdump-go-spec=filename     Write all declarations to file as Go code.
  -fdump-internal-locations   Dump detailed information on GCC's internal representation of source
                              code locations.
  -fdump-noaddr               Suppress output of addresses in debugging dumps.
  -fdump-passes               Dump optimization passes.
  -fdump-unnumbered           Suppress output of instruction numbers, line number notes and addresses
                              in debugging dumps.
  -fdump-unnumbered-links     Suppress output of previous and next insn numbers in debugging dumps.
  -fdwarf2-cfi-asm            Enable CFI tables via GAS assembler directives.
  -fearly-inlining            Perform early inlining.
  -feliminate-dwarf2-dups     Does nothing.  Preserved for backward compatibility.
  -feliminate-unused-debug-symbols Perform unused symbol elimination in debug info.
  -feliminate-unused-debug-types Perform unused type elimination in debug info.
  -femit-class-debug-always   Do not suppress C++ class debug information.
  -fenable-[tree|rtl|ipa]-<pass>=range1+range2 Enable an optimization pass.
  -fexcess-precision=[fast|standard] Specify handling of excess floating-point precision.
  -fexpensive-optimizations   Perform a number of minor, expensive optimizations.
  -ffast-math                 This option lacks documentation.
  -ffat-lto-objects           Output lto objects containing both the intermediate language and binary
                              output.
  -ffile-prefix-map=<old>=<new> Map one directory name to another in compilation result.
  -ffinite-loops              Assume that loops with an exit will terminate and not loop indefinitely.
  -ffinite-math-only          Assume no NaNs or infinities are generated.
  -ffixed-<register>          Mark <register> as being unavailable to the compiler.
  -ffloat-store               Don't allocate floats and doubles in extended-precision registers.
  -fforce-addr                Does nothing.  Preserved for backward compatibility.
  -fforward-propagate         Perform a forward propagation pass on RTL.
  -ffp-contract=[off|on|fast] Perform floating-point expression contraction.
  -ffp-int-builtin-inexact    Allow built-in functions ceil, floor, round, trunc to raise "inexact"
                              exceptions.
  -ffunction-cse              Allow function addresses to be held in registers.
  -ffunction-sections         Place each function into its own section.
  -fgcse                      Perform global common subexpression elimination.
  -fgcse-after-reload         Perform global common subexpression elimination after register
                              allocation has finished.
  -fgcse-las                  Perform redundant load after store elimination in global common
                              subexpression elimination.
  -fgcse-lm                   Perform enhanced load motion during global common subexpression
                              elimination.
  -fgcse-sm                   Perform store motion after global common subexpression elimination.
  -fgnat-encodings=[all|gdb|minimal] Select the balance between GNAT encodings and standard DWARF
                              emitted in the debug information.
  -fgnu-tm                    Enable support for GNU transactional memory.
  -fgnu-unique                Use STB_GNU_UNIQUE if supported by the assembler.
  -fgraphite                  Enable in and out of Graphite representation.
  -fgraphite-identity         Enable Graphite Identity transformation.
  -fguess-branch-probability  Enable guessing of branch probabilities.
  -fhelp                      Same as --help.
  -fhelp=                     Same as --help=.
  -fhoist-adjacent-loads      Enable hoisting adjacent loads to encourage generating conditional move
                              instructions.
  -fident                     Process #ident directives.
  -fif-conversion             Perform conversion of conditional jumps to branchless equivalents.
  -fif-conversion2            Perform conversion of conditional jumps to conditional execution.
  -findirect-inlining         Perform indirect inlining.
  -finhibit-size-directive    Do not generate .size directives.
  -finline                    Enable inlining of function declared "inline", disabling disables all
                              inlining.
  -finline-atomics            Inline __atomic operations when a lock free instruction sequence is
                              available.
  -finline-functions          Integrate functions not declared "inline" into their callers when
                              profitable.
  -finline-functions-called-once Integrate functions only required by their single caller.
  -finline-limit-             Same as -finline-limit=.
  -finline-limit=<number>     Limit the size of inlined functions to <number>.
  -finline-small-functions    Integrate functions into their callers when code size is known not to
                              grow.
  -finstrument-functions      Instrument function entry and exit with profiling calls.
  -finstrument-functions-exclude-file-list=filename,... Do not instrument functions listed in files.
  -finstrument-functions-exclude-function-list=name,... Do not instrument listed functions.
  -fipa-bit-cp                Perform interprocedural bitwise constant propagation.
  -fipa-cp                    Perform interprocedural constant propagation.
  -fipa-cp-alignment          Does nothing.  Preserved for backward compatibility.
  -fipa-cp-clone              Perform cloning to make Interprocedural constant propagation stronger.
  -fipa-icf                   Perform Identical Code Folding for functions and read-only variables.
  -fipa-icf-functions         Perform Identical Code Folding for functions.
  -fipa-icf-variables         Perform Identical Code Folding for variables.
  -fipa-matrix-reorg          Does nothing. Preserved for backward compatibility.
  -fipa-modref                Perform interprocedural modref analysis.
  -fipa-profile               Perform interprocedural profile propagation.
  -fipa-pta                   Perform interprocedural points-to analysis.
  -fipa-pure-const            Discover pure and const functions.
  -fipa-ra                    Use caller save register across calls if possible.
  -fipa-reference             Discover read-only and non addressable static variables.
  -fipa-reference-addressable Discover read-only, write-only and non-addressable static variables.
  -fipa-sra                   Perform interprocedural reduction of aggregates.
  -fipa-stack-alignment       Reduce stack alignment on call sites if possible.
  -fipa-struct-reorg          Does nothing. Preserved for backward compatibility.
  -fipa-vrp                   Perform IPA Value Range Propagation.
  -fira-algorithm=[CB|priority] Set the used IRA algorithm.
  -fira-hoist-pressure        Use IRA based register pressure calculation in RTL hoist optimizations.
  -fira-loop-pressure         Use IRA based register pressure calculation in RTL loop optimizations.
  -fira-region=[one|all|mixed] Set regions for IRA.
  -fira-share-save-slots      Share slots for saving different hard registers.
  -fira-share-spill-slots     Share stack slots for spilled pseudo-registers.
  -fira-verbose=<number>      Control IRA's level of diagnostic messages.
  -fisolate-erroneous-paths-attribute Detect paths that trigger erroneous or undefined behavior due
                              to a null value being used in a way forbidden by a returns_nonnull or
                              nonnull attribute.  Isolate those paths from the main control flow and
                              turn the statement with erroneous or undefined behavior into a trap.
  -fisolate-erroneous-paths-dereference Detect paths that trigger erroneous or undefined behavior due
                              to dereferencing a null pointer.  Isolate those paths from the main
                              control flow and turn the statement with erroneous or undefined
                              behavior into a trap.
  -fivopts                    Optimize induction variables on trees.
  -fjump-tables               Use jump tables for sufficiently large switch statements.
  -fkeep-gc-roots-live        This option lacks documentation.
  -fkeep-inline-functions     Generate code for functions even if they are fully inlined.
  -fkeep-static-consts        Emit static const variables even if they are not used.
  -fkeep-static-functions     Generate code for static functions even if they are never called.
  -flarge-source-files        Improve GCC's ability to track column numbers in large source files, at
                              the expense of slower compilation.
  -fleading-underscore        Give external symbols a leading underscore.
  -flifetime-dse              Tell DSE that the storage for a C++ object is dead when the constructor
                              starts and when the destructor finishes.
  -flifetime-dse=<0,2>        This option lacks documentation.
  -flimit-function-alignment  This option lacks documentation.
  -flive-patching             Same as -flive-patching=inline-clone.
  -flive-patching=[inline-only-static|inline-clone] Control IPA optimizations to provide a safe
                              compilation for live-patching.  At the same time, provides multiple-
                              level control on the enabled IPA optimizations.
  -flive-range-shrinkage      Relief of register pressure through live range shrinkage.
  -floop-block                Enable loop nest transforms.  Same as -floop-nest-optimize.  Same as
                              -floop-nest-optimize.
  -floop-flatten              Does nothing. Preserved for backward compatibility.
  -floop-interchange          Enable loop interchange on trees.
  -floop-nest-optimize        Enable the loop nest optimizer.
  -floop-optimize             Does nothing.  Preserved for backward compatibility.
  -floop-parallelize-all      Mark all loops as parallel.
  -floop-strip-mine           Enable loop nest transforms.  Same as -floop-nest-optimize.  Same as
                              -floop-nest-optimize.
  -floop-unroll-and-jam       Perform unroll-and-jam on loops.
  -flra-remat                 Do CFG-sensitive rematerialization in LRA.
  -flto                       Enable link-time optimization.
  -flto-compression-level=<number>	Use z Use zlib/zstd compression level <number> for IL.
  -flto-odr-type-merging      Does nothing.  Preserved for backward compatibility.
  -flto-partition=            Specify the algorithm to partition symbols and vars at linktime.
  -flto-report                Report various link-time optimization statistics.
  -flto-report-wpa            Report various link-time optimization statistics for WPA only.
  -flto=                      Link-time optimization with number of parallel jobs or jobserver.
  -fmath-errno                Set errno after built-in math functions.
  -fmax-errors=<number>       Maximum number of errors to report.
  -fmem-report                Report on permanent memory allocation.
  -fmem-report-wpa            Report on permanent memory allocation in WPA only.
  -fmerge-all-constants       Attempt to merge identical constants and constant variables.
  -fmerge-constants           Attempt to merge identical constants across compilation units.
  -fmerge-debug-strings       Attempt to merge identical debug strings across compilation units.
  -fmessage-length=<number>   Limit diagnostics to <number> characters per line.  0 suppresses line-
                              wrapping.
  -fmodulo-sched              Perform SMS based modulo scheduling before the first scheduling pass.
  -fmodulo-sched-allow-regmoves Perform SMS based modulo scheduling with register moves allowed.
  -fmove-loop-invariants      Move loop invariant computations out of loops.
  -fnon-call-exceptions       Support synchronous non-call exceptions.
  -foffload-abi=[lp64|ilp32]  Set the ABI to use in an offload compiler.
  -foffload=<targets>=<options> Specify offloading targets and options for them.
  -fomit-frame-pointer        When possible do not generate stack frames.
  -fopt-info                  Enable all optimization info dumps on stderr.
  -fopt-info[-<type>=filename] Dump compiler optimization details.
  -foptimize-register-move    Does nothing. Preserved for backward compatibility.
  -foptimize-sibling-calls    Optimize sibling and tail recursive calls.
  -foptimize-strlen           Enable string length optimizations on trees.
  -fpack-struct               Pack structure members together without holes.
  -fpack-struct=<number>      Set initial maximum structure member alignment.
  -fpartial-inlining          Perform partial inlining.
  -fpatchable-function-entry= Insert NOP instructions at each function entry.
  -fpcc-struct-return         Return small aggregates in memory, not registers.
  -fpeel-loops                Perform loop peeling.
  -fpeephole                  Enable machine specific peephole optimizations.
  -fpeephole2                 Enable an RTL peephole pass before sched2.
  -fpermitted-flt-eval-methods=[c11|ts-18661] Specify which values of FLT_EVAL_METHOD are permitted.
  -fpic                       Generate position-independent code if possible (small mode).
  -fpie                       Generate position-independent code for executables if possible (small
                              mode).
  -fplt                       Use PLT for PIC calls (-fno-plt: load the address from GOT at call
                              site).
  -fplugin-arg-<name>-<key>[=<value>] Specify argument <key>=<value> for plugin <name>.
  -fplugin=                   Specify a plugin to load.
  -fpost-ipa-mem-report       Report on memory allocation before interprocedural optimization.
  -fpre-ipa-mem-report        Report on memory allocation before interprocedural optimization.
  -fpredictive-commoning      Run predictive commoning optimization.
  -fprefetch-loop-arrays      Generate prefetch instructions, if available, for arrays in loops.
  -fprofile                   Enable basic program profiling code.
  -fprofile-abs-path          Generate absolute source path names for gcov.
  -fprofile-arcs              Insert arc-based program profiling code.
  -fprofile-correction        Enable correction of flow inconsistent profile data input.
  -fprofile-dir=              Set the top-level directory for storing the profile data. The default
                              is 'pwd'.
  -fprofile-exclude-files=    Instrument only functions from files whose name does not match any of
                              the regular expressions (separated by semi-colons).
  -fprofile-filter-files=     Instrument only functions from files whose name matches any of the
                              regular expressions (separated by semi-colons).
  -fprofile-generate          Enable common options for generating profile info for profile feedback
                              directed optimizations.
  -fprofile-generate=         Enable common options for generating profile info for profile feedback
                              directed optimizations, and set -fprofile-dir=.
  -fprofile-info-section      Register the profile information in the .gcov_info section instead of
                              using a constructor/destructor.
  -fprofile-info-section=     Register the profile information in the specified section instead of
                              using a constructor/destructor.
  -fprofile-note=             Select the name for storing the profile note file.
  -fprofile-partial-training  Do not assume that functions never executed during the train run are
                              cold.
  -fprofile-prefix-path=      Remove prefix from absolute path before mangling name for -fprofile-
                              generate= and -fprofile-use=.
  -fprofile-reorder-functions Enable function reordering that improves code placement.
  -fprofile-report            Report on consistency of profile.
  -fprofile-reproducible=[serial|parallel-runs|multithreaded] Control level of reproducibility of
                              profile gathered by -fprofile-generate.
  -fprofile-update=[single|atomic|prefer-atomic] Set the profile update method.
  -fprofile-use               Enable common options for performing profile feedback directed
                              optimizations.
  -fprofile-use=              Enable common options for performing profile feedback directed
                              optimizations, and set -fprofile-dir=.
  -fprofile-values            Insert code to profile values of expressions.
  -frandom-seed               This option lacks documentation.
  -frandom-seed=<string>      Make compile reproducible using <string>.
  -freciprocal-math           Same as -fassociative-math for expressions which include division.
  -frecord-gcc-switches       Record gcc command line switches in the object file.
  -free                       Turn on Redundant Extensions Elimination pass.
  -freg-struct-return         Return small aggregates in registers.
  -fregmove                   Does nothing. Preserved for backward compatibility.
  -frename-registers          Perform a register renaming optimization pass.
  -freorder-blocks            Reorder basic blocks to improve code placement.
  -freorder-blocks-algorithm=[simple|stc] Set the used basic block reordering algorithm.
  -freorder-blocks-and-partition Reorder basic blocks and partition into hot and cold sections.
  -freorder-functions         Reorder functions to improve code placement.
  -freport-bug                Collect and dump debug information into temporary file if ICE in C/C++
                              compiler occurred.
  -frerun-cse-after-loop      Add a common subexpression elimination pass after loop optimizations.
  -frerun-loop-opt            Does nothing.  Preserved for backward compatibility.
  -freschedule-modulo-scheduled-loops Enable/Disable the traditional scheduling in loops that already
                              passed modulo scheduling.
  -frounding-math             Disable optimizations that assume default FP rounding behavior.
  -fsanitize-address-use-after-scope This option lacks documentation.
  -fsanitize-coverage=        Select type of coverage sanitization.
  -fsanitize-recover          This switch is deprecated; use -fsanitize-recover= instead.
  -fsanitize-recover=         After diagnosing undefined behavior attempt to continue execution.
  -fsanitize-sections=<sec1,sec2,...> Sanitize global variables in user-defined sections.
  -fsanitize-undefined-trap-on-error Use trap instead of a library function for undefined behavior
                              sanitization.
  -fsanitize=                 Select what to sanitize.
  -fsave-optimization-record  Write a SRCFILE.opt-record.json file detailing what optimizations were
                              performed.
  -fsched-critical-path-heuristic Enable the critical path heuristic in the scheduler.
  -fsched-dep-count-heuristic Enable the dependent count heuristic in the scheduler.
  -fsched-group-heuristic     Enable the group heuristic in the scheduler.
  -fsched-interblock          Enable scheduling across basic blocks.
  -fsched-last-insn-heuristic Enable the last instruction heuristic in the scheduler.
  -fsched-pressure            Enable register pressure sensitive insn scheduling.
  -fsched-rank-heuristic      Enable the rank heuristic in the scheduler.
  -fsched-spec                Allow speculative motion of non-loads.
  -fsched-spec-insn-heuristic Enable the speculative instruction heuristic in the scheduler.
  -fsched-spec-load           Allow speculative motion of some loads.
  -fsched-spec-load-dangerous Allow speculative motion of more loads.
  -fsched-stalled-insns       Allow premature scheduling of queued insns.
  -fsched-stalled-insns-dep   Set dependence distance checking in premature scheduling of queued
                              insns.
  -fsched-stalled-insns-dep=<number> Set dependence distance checking in premature scheduling of
                              queued insns.
  -fsched-stalled-insns=<number> Set number of queued insns that can be prematurely scheduled.
  -fsched-verbose=<number>    Set the verbosity level of the scheduler.
  -fsched2-use-superblocks    If scheduling post reload, do superblock scheduling.
  -fsched2-use-traces         Does nothing.  Preserved for backward compatibility.
  -fschedule-fusion           Perform a target dependent instruction fusion optimization pass.
  -fschedule-insns            Reschedule instructions before register allocation.
  -fschedule-insns2           Reschedule instructions after register allocation.
  -fsection-anchors           Access data in the same section from shared anchor points.
  -fsee                       Does nothing.  Preserved for backward compatibility.
  -fsel-sched-pipelining      Perform software pipelining of inner loops during selective scheduling.
  -fsel-sched-pipelining-outer-loops Perform software pipelining of outer loops during selective
                              scheduling.
  -fsel-sched-reschedule-pipelined Reschedule pipelined regions without pipelining.
  -fselective-scheduling      Schedule instructions using selective scheduling algorithm.
  -fselective-scheduling2     Run selective scheduling after reload.
  -fself-test=                Run self-tests, using the given path to locate test files.
  -fsemantic-interposition    Allow interposing function (or variables) by ones with different
                              semantics (or initializer) respectively by dynamic linker.
  -fshow-column               Show column numbers in diagnostics, when available.  Default on.
  -fshrink-wrap               Emit function prologues only before parts of the function that need it,
                              rather than at the top of the function.
  -fshrink-wrap-separate      Shrink-wrap parts of the prologue and epilogue separately.
  -fsignaling-nans            Disable optimizations observable by IEEE signaling NaNs.
  -fsigned-zeros              Disable floating point optimizations that ignore the IEEE signedness of
                              zero.
  -fsimd-cost-model=[unlimited|dynamic|cheap|very-cheap] Specifies the vectorization cost model for
                              code marked with a simd directive.
  -fsingle-precision-constant Convert floating point constants to single precision constants.
  -fsplit-ivs-in-unroller     Split lifetimes of induction variables when loops are unrolled.
  -fsplit-loops               Perform loop splitting.
  -fsplit-paths               Split paths leading to loop backedges.
  -fsplit-stack               Generate discontiguous stack frames.
  -fsplit-wide-types          Split wide types into independent registers.
  -fsplit-wide-types-early    Split wide types into independent registers earlier.
  -fssa-backprop              Enable backward propagation of use properties at the SSA level.
  -fssa-phiopt                Optimize conditional patterns using SSA PHI nodes.
  -fstack-check               Insert stack checking code into the program.  Same as -fstack-
                              check=specific.  Same as -fstack-check=.
  -fstack-check=[no|generic|specific] Insert stack checking code into the program.
  -fstack-clash-protection    Insert code to probe each page of stack space as it is allocated to
                              protect from stack-clash style attacks.
  -fstack-limit               This option lacks documentation.
  -fstack-limit-register=<register> Trap if the stack goes past <register>.
  -fstack-limit-symbol=<name> Trap if the stack goes past symbol <name>.
  -fstack-protector           Use propolice as a stack protection method.
  -fstack-protector-all       Use a stack protection method for every function.
  -fstack-protector-explicit  Use stack protection method only for functions with the stack_protect
                              attribute.
  -fstack-protector-strong    Use a smart stack protection method for certain functions.
  -fstack-reuse=[all|named_vars|none] Set stack reuse level for local variables.
  -fstack-usage               Output stack usage information on a per-function basis.
  -fstdarg-opt                Optimize amount of stdarg registers saved to stack at start of function.
  -fstore-merging             Merge adjacent stores.
  -fstrength-reduce           Does nothing.  Preserved for backward compatibility.
  -fstrict-aliasing           Assume strict aliasing rules apply.
  -fstrict-overflow           Treat signed overflow as undefined.  Negated as -fwrapv -fwrapv-pointer.
  -fstrict-volatile-bitfields Force bitfield accesses to match their type width.
  -fsync-libcalls             Implement __atomic operations via libcalls to legacy __sync functions.
  -fsyntax-only               Check for syntax errors, then stop.
  -ftabstop=                  -ftabstop=<number>      Distance between tab stops for column reporting.
  -ftarget-help               Same as --target-help.
  -ftest-coverage             Create data files needed by "gcov".
  -fthread-jumps              Perform jump threading optimizations.
  -ftime-report               Report the time taken by each compiler pass.
  -ftime-report-details       Record times taken by sub-phases separately.
  -ftls-model=[global-dynamic|local-dynamic|initial-exec|local-exec] Set the default thread-local
                              storage code generation model.
  -ftoplevel-reorder          Reorder top level functions, variables, and asms.
  -ftracer                    Perform superblock formation via tail duplication.
  -ftrampolines               For targets that normally need trampolines for nested functions, always
                              generate them instead of using descriptors.
  -ftrapping-math             Assume floating-point operations can trap.
  -ftrapv                     Trap for signed overflow in addition, subtraction and multiplication.
  -ftree-bit-ccp              Enable SSA-BIT-CCP optimization on trees.
  -ftree-builtin-call-dce     Enable conditional dead code elimination for builtin calls.
  -ftree-ccp                  Enable SSA-CCP optimization on trees.
  -ftree-ch                   Enable loop header copying on trees.
  -ftree-coalesce-inlined-vars Does nothing.  Preserved for backward compatibility.
  -ftree-coalesce-vars        Enable SSA coalescing of user variables.
  -ftree-copy-prop            Enable copy propagation on trees.
  -ftree-copyrename           Does nothing.  Preserved for backward compatibility.
  -ftree-cselim               Transform condition stores into unconditional ones.
  -ftree-dce                  Enable SSA dead code elimination optimization on trees.
  -ftree-dominator-opts       Enable dominator optimizations.
  -ftree-dse                  Enable dead store elimination.
  -ftree-forwprop             Enable forward propagation on trees.
  -ftree-fre                  Enable Full Redundancy Elimination (FRE) on trees.
  -ftree-loop-distribute-patterns Enable loop distribution for patterns transformed into a library
                              call.
  -ftree-loop-distribution    Enable loop distribution on trees.
  -ftree-loop-if-convert      Convert conditional jumps in innermost loops to branchless equivalents.
  -ftree-loop-if-convert-stores Does nothing. Preserved for backward compatibility.
  -ftree-loop-im              Enable loop invariant motion on trees.
  -ftree-loop-ivcanon         Create canonical induction variables in loops.
  -ftree-loop-linear          Enable loop nest transforms.  Same as -floop-nest-optimize.  Same as
                              -floop-nest-optimize.
  -ftree-loop-optimize        Enable loop optimizations on tree level.
  -ftree-loop-vectorize       Enable loop vectorization on trees.
  -ftree-lrs                  Perform live range splitting during the SSA->normal pass.
  -ftree-parallelize-loops=<number> Enable automatic parallelization of loops.
  -ftree-partial-pre          In SSA-PRE optimization on trees, enable partial-partial redundancy
                              elimination.
  -ftree-phiprop              Enable hoisting loads from conditional pointers.
  -ftree-pre                  Enable SSA-PRE optimization on trees.
  -ftree-pta                  Perform function-local points-to analysis on trees.
  -ftree-reassoc              Enable reassociation on tree level.
  -ftree-salias               Does nothing.  Preserved for backward compatibility.
  -ftree-scev-cprop           Enable copy propagation of scalar-evolution information.
  -ftree-sink                 Enable SSA code sinking on trees.
  -ftree-slp-vectorize        Enable basic block vectorization (SLP) on trees.
  -ftree-slsr                 Perform straight-line strength reduction.
  -ftree-sra                  Perform scalar replacement of aggregates.
  -ftree-store-ccp            Does nothing.  Preserved for backward compatibility.
  -ftree-store-copy-prop      Does nothing.  Preserved for backward compatibility.
  -ftree-switch-conversion    Perform conversions of switch initializations.
  -ftree-tail-merge           Enable tail merging on trees.
  -ftree-ter                  Replace temporary expressions in the SSA->normal pass.
  -ftree-vect-loop-version    Does nothing. Preserved for backward compatibility.
  -ftree-vectorize            Enable vectorization on trees.
  -ftree-vectorizer-verbose=  Does nothing.  Preserved for backward compatibility.
  -ftree-vrp                  Perform Value Range Propagation on trees.
  -funconstrained-commons     Assume common declarations may be overridden with ones with a larger
                              trailing array.
  -funit-at-a-time            Compile whole compilation unit at a time.
  -funroll-all-loops          Perform loop unrolling for all loops.
  -funroll-loops              Perform loop unrolling when iteration count is known.
  -funsafe-loop-optimizations Does nothing.  Preserved for backward compatibility.
  -funsafe-math-optimizations Allow math optimizations that may violate IEEE or ISO standards.
  -funswitch-loops            Perform loop unswitching.
  -funwind-tables             Just generate unwind tables for exception handling.
  -fuse-ld=bfd                Use the bfd linker instead of the default linker.
  -fuse-ld=gold               Use the gold linker instead of the default linker.
  -fuse-ld=lld                Use the lld LLVM linker instead of the default linker.
  -fuse-ld=mold               Use the Modern linker (MOLD) linker instead of the default linker.
  -fuse-linker-plugin         This option lacks documentation.
  -fvar-tracking              Perform variable tracking.
  -fvar-tracking-assignments  Perform variable tracking by annotating assignments.
  -fvar-tracking-assignments-toggle Toggle -fvar-tracking-assignments.
  -fvar-tracking-uninit       Perform variable tracking and also tag variables that are uninitialized.
  -fvariable-expansion-in-unroller Apply variable expansion when loops are unrolled.
  -fvect-cost-model           Enables the dynamic vectorizer cost model.  Preserved for backward
                              compatibility.  Same as -fvect-cost-model=.
  -fvect-cost-model=[unlimited|dynamic|cheap|very-cheap] Specifies the cost model for vectorization.
  -fverbose-asm               Add extra commentary to assembler output.
  -fversion                   This option lacks documentation.
  -fversion-loops-for-strides Version loops based on whether indices have a stride of one.
  -fvisibility=[default|internal|hidden|protected] Set the default symbol visibility.
  -fvpt                       Use expression value profiles in optimizations.
  -fvtable-verify=            Validate vtable pointers before using them.
  -fvtv-counts                Output vtable verification counters.
  -fvtv-debug                 Output vtable verification pointer sets information.
  -fweb                       Construct webs and split unrelated uses of single variable.
  -fwhole-program             Perform whole program optimizations.
  -fwrapv                     Assume signed arithmetic overflow wraps around.
  -fwrapv-pointer             Assume pointer overflow wraps around.
  -fzee                       Does nothing.  Preserved for backward compatibility.
  -fzero-call-used-regs=      Clear call-used registers upon function return.
  -fzero-initialized-in-bss   Put zero initialized data in the bss section.
  -g                          Generate debug information in default format.
  -gas-loc-support            Assume assembler support for (DWARF2+) .loc directives.
  -gas-locview-support        Assume assembler support for view in (DWARF2+) .loc directives.
  -gcoff                      Does nothing.  Preserved for backward compatibility.
  -gcoff1                     Does nothing.  Preserved for backward compatibility.
  -gcoff2                     Does nothing.  Preserved for backward compatibility.
  -gcoff3                     Does nothing.  Preserved for backward compatibility.
  -gcolumn-info               Record DW_AT_decl_column and DW_AT_call_column in DWARF.
  -gdescribe-dies             Add description attributes to some DWARF DIEs that have no name
                              attribute.
  -gdwarf                     Generate debug information in default version of DWARF format.
  -gdwarf-                    Generate debug information in DWARF v2 (or later) format.
  -gdwarf32                   Use 32-bit DWARF format when emitting DWARF debug information.
  -gdwarf64                   Use 64-bit DWARF format when emitting DWARF debug information.
  -ggdb                       Generate debug information in default extended format.
  -ggnu-pubnames              Generate DWARF pubnames and pubtypes sections with GNU extensions.
  -ginline-points             Generate extended entry point information for inlined functions.
  -ginternal-reset-location-views Compute locview reset points based on insn length estimates.
  -gno-pubnames               Don't generate DWARF pubnames and pubtypes sections.
  -gpubnames                  Generate DWARF pubnames and pubtypes sections.
  -grecord-gcc-switches       Record gcc command line switches in DWARF DW_AT_producer.
  -gsplit-dwarf               Generate debug information in separate .dwo files.
  -gstabs                     Generate debug information in STABS format.
  -gstabs+                    Generate debug information in extended STABS format.
  -gstatement-frontiers       Emit progressive recommended breakpoint locations.
  -gstrict-dwarf              Don't emit DWARF additions beyond selected version.
  -gtoggle                    Toggle debug information generation.
  -gvariable-location-views   Augment variable location lists with progressive views.
  -gvariable-location-views=incompat5 This option lacks documentation.
  -gvms                       Generate debug information in VMS format.
  -gxcoff                     Generate debug information in XCOFF format.
  -gxcoff+                    Generate debug information in extended XCOFF format.
  -gz                         Generate compressed debug sections.
  -gz=<format>                Generate compressed debug sections in format <format>.
  -imultiarch <dir>           Set <dir> to be the multiarch include subdirectory.
  -iplugindir=<dir>           Set <dir> to be the default plugin directory.
  -o <file>                   Place output into <file>.
  -p                          Enable function profiling.
  -pedantic-errors            Like -pedantic but issue them as errors.
  -quiet                      Do not display functions compiled or elapsed time.
  -v                          Enable verbose output.

The following options control optimizations:
  -O<number>                  Set optimization level to <number>.
  -Ofast                      Optimize for speed disregarding exact standards compliance.
  -Og                         Optimize for debugging experience rather than speed or size.
  -Os                         Optimize for space rather than speed.
  -faggressive-loop-optimizations Aggressively optimize loops using language constraints.
  -falign-functions           Align the start of functions.
  -falign-functions=          This option lacks documentation.
  -falign-jumps               Align labels which are only reached by jumping.
  -falign-jumps=              This option lacks documentation.
  -falign-labels              Align all labels.
  -falign-labels=             This option lacks documentation.
  -falign-loops               Align the start of loops.
  -falign-loops=              This option lacks documentation.
  -fallocation-dce            Tell DCE to remove unused C++ allocations.
  -fallow-store-data-races    Allow the compiler to introduce new data races on stores.
  -fassociative-math          Allow optimization for floating-point arithmetic which may change the
                              result of the operation due to rounding.
  -fassume-phsa               Assume we are finalizing for phsa and its libhsail-rt.  Enables
                              additional phsa-specific optimizations (default).
  -fasynchronous-unwind-tables Generate unwind tables that are exact at each instruction boundary.
  -fauto-inc-dec              Generate auto-inc/dec instructions.
  -fbit-tests                 Use bit tests for sufficiently large switch statements.
  -fbranch-count-reg          Replace add, compare, branch with branch on count register.
  -fbranch-probabilities      Use profiling information for branch probabilities.
  -fcaller-saves              Save registers around function calls.
  -fcode-hoisting             Enable code hoisting.
  -fcombine-stack-adjustments Looks for opportunities to reduce stack adjustments and stack
                              references.
  -fcompare-elim              Perform comparison elimination after register allocation has finished.
  -fconserve-stack            Do not perform optimizations increasing noticeably stack usage.
  -fcprop-registers           Perform a register copy-propagation optimization pass.
  -fcrossjumping              Perform cross-jumping optimization.
  -fcse-follow-jumps          When running CSE, follow jumps to their targets.
  -fcx-fortran-rules          Complex multiplication and division follow Fortran rules.
  -fcx-limited-range          Omit range reduction step when performing complex division.
  -fdce                       Use the RTL dead code elimination pass.
  -fdefer-pop                 Defer popping functions args from stack until later.
  -fdelayed-branch            Attempt to fill delay slots of branch instructions.
  -fdelete-dead-exceptions    Delete dead instructions that may throw exceptions.
  -fdelete-null-pointer-checks Delete useless null pointer checks.
  -fdevirtualize              Try to convert virtual calls to direct ones.
  -fdevirtualize-speculatively Perform speculative devirtualization.
  -fdse                       Use the RTL dead store elimination pass.
  -fearly-inlining            Perform early inlining.
  -fexceptions                Enable exception handling.
  -fexcess-precision=[fast|standard] Specify handling of excess floating-point precision.
  -fexpensive-optimizations   Perform a number of minor, expensive optimizations.
  -ffast-math                 This option lacks documentation.
  -ffinite-loops              Assume that loops with an exit will terminate and not loop indefinitely.
  -ffinite-math-only          Assume no NaNs or infinities are generated.
  -ffloat-store               Don't allocate floats and doubles in extended-precision registers.
  -fforward-propagate         Perform a forward propagation pass on RTL.
  -ffp-contract=[off|on|fast] Perform floating-point expression contraction.
  -ffp-int-builtin-inexact    Allow built-in functions ceil, floor, round, trunc to raise "inexact"
                              exceptions.
  -ffunction-cse              Allow function addresses to be held in registers.
  -fgcse                      Perform global common subexpression elimination.
  -fgcse-after-reload         Perform global common subexpression elimination after register
                              allocation has finished.
  -fgcse-las                  Perform redundant load after store elimination in global common
                              subexpression elimination.
  -fgcse-lm                   Perform enhanced load motion during global common subexpression
                              elimination.
  -fgcse-sm                   Perform store motion after global common subexpression elimination.
  -fgraphite                  Enable in and out of Graphite representation.
  -fgraphite-identity         Enable Graphite Identity transformation.
  -fguess-branch-probability  Enable guessing of branch probabilities.
  -fhandle-exceptions         Same as -fexceptions.  Uses of this option are diagnosed.
  -fhoist-adjacent-loads      Enable hoisting adjacent loads to encourage generating conditional move
                              instructions.
  -fif-conversion             Perform conversion of conditional jumps to branchless equivalents.
  -fif-conversion2            Perform conversion of conditional jumps to conditional execution.
  -findirect-inlining         Perform indirect inlining.
  -finline                    Enable inlining of function declared "inline", disabling disables all
                              inlining.
  -finline-atomics            Inline __atomic operations when a lock free instruction sequence is
                              available.
  -finline-functions          Integrate functions not declared "inline" into their callers when
                              profitable.
  -finline-functions-called-once Integrate functions only required by their single caller.
  -finline-small-functions    Integrate functions into their callers when code size is known not to
                              grow.
  -fipa-bit-cp                Perform interprocedural bitwise constant propagation.
  -fipa-cp                    Perform interprocedural constant propagation.
  -fipa-cp-clone              Perform cloning to make Interprocedural constant propagation stronger.
  -fipa-icf                   Perform Identical Code Folding for functions and read-only variables.
  -fipa-icf-functions         Perform Identical Code Folding for functions.
  -fipa-icf-variables         Perform Identical Code Folding for variables.
  -fipa-modref                Perform interprocedural modref analysis.
  -fipa-profile               Perform interprocedural profile propagation.
  -fipa-pta                   Perform interprocedural points-to analysis.
  -fipa-pure-const            Discover pure and const functions.
  -fipa-ra                    Use caller save register across calls if possible.
  -fipa-reference             Discover read-only and non addressable static variables.
  -fipa-reference-addressable Discover read-only, write-only and non-addressable static variables.
  -fipa-sra                   Perform interprocedural reduction of aggregates.
  -fipa-stack-alignment       Reduce stack alignment on call sites if possible.
  -fipa-vrp                   Perform IPA Value Range Propagation.
  -fira-algorithm=[CB|priority] Set the used IRA algorithm.
  -fira-hoist-pressure        Use IRA based register pressure calculation in RTL hoist optimizations.
  -fira-loop-pressure         Use IRA based register pressure calculation in RTL loop optimizations.
  -fira-region=[one|all|mixed] Set regions for IRA.
  -fira-share-save-slots      Share slots for saving different hard registers.
  -fira-share-spill-slots     Share stack slots for spilled pseudo-registers.
  -fisolate-erroneous-paths-attribute Detect paths that trigger erroneous or undefined behavior due
                              to a null value being used in a way forbidden by a returns_nonnull or
                              nonnull attribute.  Isolate those paths from the main control flow and
                              turn the statement with erroneous or undefined behavior into a trap.
  -fisolate-erroneous-paths-dereference Detect paths that trigger erroneous or undefined behavior due
                              to dereferencing a null pointer.  Isolate those paths from the main
                              control flow and turn the statement with erroneous or undefined
                              behavior into a trap.
  -fivopts                    Optimize induction variables on trees.
  -fjump-tables               Use jump tables for sufficiently large switch statements.
  -fkeep-gc-roots-live        This option lacks documentation.
  -flifetime-dse              Tell DSE that the storage for a C++ object is dead when the constructor
                              starts and when the destructor finishes.
  -flifetime-dse=<0,2>        This option lacks documentation.
  -flimit-function-alignment  This option lacks documentation.
  -flive-patching             Same as -flive-patching=inline-clone.
  -flive-patching=[inline-only-static|inline-clone] Control IPA optimizations to provide a safe
                              compilation for live-patching.  At the same time, provides multiple-
                              level control on the enabled IPA optimizations.
  -flive-range-shrinkage      Relief of register pressure through live range shrinkage.
  -floop-interchange          Enable loop interchange on trees.
  -floop-nest-optimize        Enable the loop nest optimizer.
  -floop-parallelize-all      Mark all loops as parallel.
  -floop-unroll-and-jam       Perform unroll-and-jam on loops.
  -flra-remat                 Do CFG-sensitive rematerialization in LRA.
  -fmath-errno                Set errno after built-in math functions.
  -fmodulo-sched              Perform SMS based modulo scheduling before the first scheduling pass.
  -fmodulo-sched-allow-regmoves Perform SMS based modulo scheduling with register moves allowed.
  -fmove-loop-invariants      Move loop invariant computations out of loops.
  -fnon-call-exceptions       Support synchronous non-call exceptions.
  -fnothrow-opt               Treat a throw() exception specification as noexcept to improve code
                              size.
  -fomit-frame-pointer        When possible do not generate stack frames.
  -fopt-info                  Enable all optimization info dumps on stderr.
  -foptimize-sibling-calls    Optimize sibling and tail recursive calls.
  -foptimize-strlen           Enable string length optimizations on trees.
  -fpack-struct               Pack structure members together without holes.
  -fpack-struct=<number>      Set initial maximum structure member alignment.
  -fpartial-inlining          Perform partial inlining.
  -fpatchable-function-entry= Insert NOP instructions at each function entry.
  -fpeel-loops                Perform loop peeling.
  -fpeephole                  Enable machine specific peephole optimizations.
  -fpeephole2                 Enable an RTL peephole pass before sched2.
  -fplt                       Use PLT for PIC calls (-fno-plt: load the address from GOT at call
                              site).
  -fpredictive-commoning      Run predictive commoning optimization.
  -fprefetch-loop-arrays      Generate prefetch instructions, if available, for arrays in loops.
  -fprintf-return-value       Treat known sprintf return values as constants.
  -fprofile-partial-training  Do not assume that functions never executed during the train run are
                              cold.
  -fprofile-reorder-functions Enable function reordering that improves code placement.
  -freciprocal-math           Same as -fassociative-math for expressions which include division.
  -free                       Turn on Redundant Extensions Elimination pass.
  -freg-struct-return         Return small aggregates in registers.
  -frename-registers          Perform a register renaming optimization pass.
  -freorder-blocks            Reorder basic blocks to improve code placement.
  -freorder-blocks-algorithm=[simple|stc] Set the used basic block reordering algorithm.
  -freorder-blocks-and-partition Reorder basic blocks and partition into hot and cold sections.
  -freorder-functions         Reorder functions to improve code placement.
  -frerun-cse-after-loop      Add a common subexpression elimination pass after loop optimizations.
  -freschedule-modulo-scheduled-loops Enable/Disable the traditional scheduling in loops that already
                              passed modulo scheduling.
  -frounding-math             Disable optimizations that assume default FP rounding behavior.
  -frtti                      Generate run time type descriptor information.
  -fsave-optimization-record  Write a SRCFILE.opt-record.json file detailing what optimizations were
                              performed.
  -fsched-critical-path-heuristic Enable the critical path heuristic in the scheduler.
  -fsched-dep-count-heuristic Enable the dependent count heuristic in the scheduler.
  -fsched-group-heuristic     Enable the group heuristic in the scheduler.
  -fsched-interblock          Enable scheduling across basic blocks.
  -fsched-last-insn-heuristic Enable the last instruction heuristic in the scheduler.
  -fsched-pressure            Enable register pressure sensitive insn scheduling.
  -fsched-rank-heuristic      Enable the rank heuristic in the scheduler.
  -fsched-spec                Allow speculative motion of non-loads.
  -fsched-spec-insn-heuristic Enable the speculative instruction heuristic in the scheduler.
  -fsched-spec-load           Allow speculative motion of some loads.
  -fsched-spec-load-dangerous Allow speculative motion of more loads.
  -fsched-stalled-insns       Allow premature scheduling of queued insns.
  -fsched-stalled-insns-dep   Set dependence distance checking in premature scheduling of queued
                              insns.
  -fsched-stalled-insns-dep=<number> Set dependence distance checking in premature scheduling of
                              queued insns.
  -fsched-stalled-insns=<number> Set number of queued insns that can be prematurely scheduled.
  -fsched2-use-superblocks    If scheduling post reload, do superblock scheduling.
  -fschedule-fusion           Perform a target dependent instruction fusion optimization pass.
  -fschedule-insns            Reschedule instructions before register allocation.
  -fschedule-insns2           Reschedule instructions after register allocation.
  -fsection-anchors           Access data in the same section from shared anchor points.
  -fsel-sched-pipelining      Perform software pipelining of inner loops during selective scheduling.
  -fsel-sched-pipelining-outer-loops Perform software pipelining of outer loops during selective
                              scheduling.
  -fsel-sched-reschedule-pipelined Reschedule pipelined regions without pipelining.
  -fselective-scheduling      Schedule instructions using selective scheduling algorithm.
  -fselective-scheduling2     Run selective scheduling after reload.
  -fshort-enums               Use the narrowest integer type possible for enumeration types.
  -fshort-wchar               Force the underlying type for "wchar_t" to be "unsigned short".
  -fshrink-wrap               Emit function prologues only before parts of the function that need it,
                              rather than at the top of the function.
  -fshrink-wrap-separate      Shrink-wrap parts of the prologue and epilogue separately.
  -fsignaling-nans            Disable optimizations observable by IEEE signaling NaNs.
  -fsigned-zeros              Disable floating point optimizations that ignore the IEEE signedness of
                              zero.
  -fsimd-cost-model=[unlimited|dynamic|cheap|very-cheap] Specifies the vectorization cost model for
                              code marked with a simd directive.
  -fsingle-precision-constant Convert floating point constants to single precision constants.
  -fsplit-ivs-in-unroller     Split lifetimes of induction variables when loops are unrolled.
  -fsplit-loops               Perform loop splitting.
  -fsplit-paths               Split paths leading to loop backedges.
  -fsplit-wide-types          Split wide types into independent registers.
  -fsplit-wide-types-early    Split wide types into independent registers earlier.
  -fssa-backprop              Enable backward propagation of use properties at the SSA level.
  -fssa-phiopt                Optimize conditional patterns using SSA PHI nodes.
  -fstack-check=[no|generic|specific] Insert stack checking code into the program.
  -fstack-clash-protection    Insert code to probe each page of stack space as it is allocated to
                              protect from stack-clash style attacks.
  -fstack-protector           Use propolice as a stack protection method.
  -fstack-protector-all       Use a stack protection method for every function.
  -fstack-protector-explicit  Use stack protection method only for functions with the stack_protect
                              attribute.
  -fstack-protector-strong    Use a smart stack protection method for certain functions.
  -fstack-reuse=[all|named_vars|none] Set stack reuse level for local variables.
  -fstdarg-opt                Optimize amount of stdarg registers saved to stack at start of function.
  -fstore-merging             Merge adjacent stores.
  -fstrict-aliasing           Assume strict aliasing rules apply.
  -fstrict-enums              Assume that values of enumeration type are always within the minimum
                              range of that type.
  -fstrict-volatile-bitfields Force bitfield accesses to match their type width.
  -fthread-jumps              Perform jump threading optimizations.
  -fno-threadsafe-statics     Do not generate thread-safe code for initializing local statics.
  -ftoplevel-reorder          Reorder top level functions, variables, and asms.
  -ftracer                    Perform superblock formation via tail duplication.
  -ftrapping-math             Assume floating-point operations can trap.
  -ftrapv                     Trap for signed overflow in addition, subtraction and multiplication.
  -ftree-bit-ccp              Enable SSA-BIT-CCP optimization on trees.
  -ftree-builtin-call-dce     Enable conditional dead code elimination for builtin calls.
  -ftree-ccp                  Enable SSA-CCP optimization on trees.
  -ftree-ch                   Enable loop header copying on trees.
  -ftree-coalesce-vars        Enable SSA coalescing of user variables.
  -ftree-copy-prop            Enable copy propagation on trees.
  -ftree-cselim               Transform condition stores into unconditional ones.
  -ftree-dce                  Enable SSA dead code elimination optimization on trees.
  -ftree-dominator-opts       Enable dominator optimizations.
  -ftree-dse                  Enable dead store elimination.
  -ftree-forwprop             Enable forward propagation on trees.
  -ftree-fre                  Enable Full Redundancy Elimination (FRE) on trees.
  -ftree-loop-distribute-patterns Enable loop distribution for patterns transformed into a library
                              call.
  -ftree-loop-distribution    Enable loop distribution on trees.
  -ftree-loop-if-convert      Convert conditional jumps in innermost loops to branchless equivalents.
  -ftree-loop-im              Enable loop invariant motion on trees.
  -ftree-loop-ivcanon         Create canonical induction variables in loops.
  -ftree-loop-optimize        Enable loop optimizations on tree level.
  -ftree-loop-vectorize       Enable loop vectorization on trees.
  -ftree-lrs                  Perform live range splitting during the SSA->normal pass.
  -ftree-parallelize-loops=<number> Enable automatic parallelization of loops.
  -ftree-partial-pre          In SSA-PRE optimization on trees, enable partial-partial redundancy
                              elimination.
  -ftree-phiprop              Enable hoisting loads from conditional pointers.
  -ftree-pre                  Enable SSA-PRE optimization on trees.
  -ftree-pta                  Perform function-local points-to analysis on trees.
  -ftree-reassoc              Enable reassociation on tree level.
  -ftree-scev-cprop           Enable copy propagation of scalar-evolution information.
  -ftree-sink                 Enable SSA code sinking on trees.
  -ftree-slp-vectorize        Enable basic block vectorization (SLP) on trees.
  -ftree-slsr                 Perform straight-line strength reduction.
  -ftree-sra                  Perform scalar replacement of aggregates.
  -ftree-switch-conversion    Perform conversions of switch initializations.
  -ftree-tail-merge           Enable tail merging on trees.
  -ftree-ter                  Replace temporary expressions in the SSA->normal pass.
  -ftree-vectorize            Enable vectorization on trees.
  -ftree-vrp                  Perform Value Range Propagation on trees.
  -funconstrained-commons     Assume common declarations may be overridden with ones with a larger
                              trailing array.
  -funroll-all-loops          Perform loop unrolling for all loops.
  -funroll-completely-grow-size This option lacks documentation.
  -funroll-loops              Perform loop unrolling when iteration count is known.
  -funsafe-math-optimizations Allow math optimizations that may violate IEEE or ISO standards.
  -funswitch-loops            Perform loop unswitching.
  -funwind-tables             Just generate unwind tables for exception handling.
  -fvar-tracking              Perform variable tracking.
  -fvar-tracking-assignments  Perform variable tracking by annotating assignments.
  -fvar-tracking-assignments-toggle Toggle -fvar-tracking-assignments.
  -fvar-tracking-uninit       Perform variable tracking and also tag variables that are uninitialized.
  -fvariable-expansion-in-unroller Apply variable expansion when loops are unrolled.
  -fvect-cost-model=[unlimited|dynamic|cheap|very-cheap] Specifies the cost model for vectorization.
  -fversion-loops-for-strides Version loops based on whether indices have a stride of one.
  -fvpt                       Use expression value profiles in optimizations.
  -fweb                       Construct webs and split unrelated uses of single variable.
  -fwrapv                     Assume signed arithmetic overflow wraps around.
  -fwrapv-pointer             Assume pointer overflow wraps around.

The following options control parameters:
  --param=align-loop-iterations= Loops iterating at least selected number of iterations will get loop
                              alignment.
  --param=align-threshold=<1,65536> Select fraction of the maximal frequency of executions of basic
                              block in function given basic block get alignment.
  --param=analyzer-bb-explosion-factor= The maximum number of 'after supernode' exploded nodes within
                              the analyzer per supernode, before terminating analysis.
  --param=analyzer-max-constraints= The maximum number of constraints per state.
  --param=analyzer-max-enodes-for-full-dump= The maximum depth of exploded nodes that should appear
                              in a dot dump before switching to a less verbose format.
  --param=analyzer-max-enodes-per-program-point= The maximum number of exploded nodes per program
                              point within the analyzer, before terminating analysis of that point.
  --param=analyzer-max-infeasible-edges= The maximum number of infeasible edges to reject before
                              declaring a diagnostic as infeasible.
  --param=analyzer-max-recursion-depth= The maximum number of times a callsite can appear in a call
                              stack within the analyzer, before terminating analysis of a call that
                              would recurse deeper.
  --param=analyzer-max-svalue-depth= The maximum depth of a symbolic value, before approximating the
                              value as unknown.
  --param=analyzer-min-snodes-for-call-summary= The minimum number of supernodes within a function
                              for the analyzer to consider summarizing its effects at call sites.
  --param=asan-globals=<0,1>  Enable asan globals protection.
  --param=asan-instrument-allocas=<0,1> Enable asan allocas/VLAs protection.
  --param=asan-instrument-reads=<0,1> Enable asan load operations protection.
  --param=asan-instrument-writes=<0,1> Enable asan store operations protection.
  --param=asan-instrumentation-with-call-threshold= Use callbacks instead of inline code if number of
                              accesses in function becomes greater or equal to this number.
  --param=asan-memintrin=<0,1> Enable asan builtin functions protection.
  --param=asan-stack=<0,1>    Enable asan stack protection.
  --param=asan-use-after-return=<0,1> Enable asan detection of use-after-return bugs.
  --param=avg-loop-niter=<1,65536> Average number of iterations of a loop.
  --param=avoid-fma-max-bits=<0,512> Maximum number of bits for which we avoid creating FMAs.
  --param=builtin-expect-probability=<0,100> Set the estimated probability in percentage for builtin
                              expect. The default value is 90% probability.
  --param=builtin-string-cmp-inline-length=<0,100> The maximum length of a constant string for a
                              builtin string cmp call eligible for inlining. The default value is 3.
  --param=case-values-threshold= The smallest number of different values for which it is best to use
                              a jump-table instead of a tree of conditional branches, if 0, use the
                              default for the machine.
  --param=comdat-sharing-probability= Probability that COMDAT function will be shared with different
                              compilation unit.
  --param=cxx-max-namespaces-for-diagnostic-help= Maximum number of namespaces to search for
                              alternatives when name lookup fails.
  --param=dse-max-alias-queries-per-store= Maximum number of queries into the alias oracle per store.
  --param=dse-max-object-size= Maximum size (in bytes) of objects tracked bytewise by dead store
                              elimination.
  --param=early-inlining-insns= Maximal estimated growth of function body caused by early inlining of
                              single call.
  --param=evrp-mode=          --param=evrp-mode=[legacy|ranger|legacy-first|ranger-first|ranger-
                              trace|ranger-debug|trace|debug] Specifies the mode Early VRP should
                              operate in.
  --param=evrp-sparse-threshold= Maximum number of basic blocks before EVRP uses a sparse cache.
  --param=fsm-maximum-phi-arguments=<1,999999> Maximum number of arguments a PHI may have before the
                              FSM threader will not try to thread through its block.
  --param=fsm-scale-path-blocks=<1,10> Scale factor to apply to the number of blocks in a threading
                              path when comparing to the number of (scaled) statements.
  --param=fsm-scale-path-stmts=<1,10> Scale factor to apply to the number of statements in a
                              threading path when comparing to the number of (scaled) blocks.
  --param=gcse-after-reload-critical-fraction= The threshold ratio of critical edges execution count
                              that permit performing redundancy elimination after reload.
  --param=gcse-after-reload-partial-fraction= The threshold ratio for performing partial redundancy
                              elimination after reload.
  --param=gcse-cost-distance-ratio= Scaling factor in calculation of maximum distance an expression
                              can be moved by GCSE optimizations.
  --param=gcse-unrestricted-cost= Cost at which GCSE optimizations will not constraint the distance
                              an expression can travel.
  --param=ggc-min-expand=     Minimum heap expansion to trigger garbage collection, as a percentage
                              of the total size of the heap.
  --param=ggc-min-heapsize=   Minimum heap size before we start collecting garbage, in kilobytes.
  --param=gimple-fe-computed-hot-bb-threshold= The number of executions of a basic block which is
                              considered hot. The parameter is used only in GIMPLE FE.
  --param=graphite-allow-codegen-errors=<0,1> Whether codegen errors should be ICEs when -fchecking.
  --param=graphite-max-arrays-per-scop= Maximum number of arrays per SCoP.
  --param=graphite-max-nb-scop-params= Maximum number of parameters in a SCoP.
  --param=hash-table-verification-limit= The number of elements for which hash table verification is
                              done for each searched element.
  --param=hot-bb-count-fraction= The denominator n of fraction 1/n of the maximal execution count of
                              a basic block in the entire program that a basic block needs to at
                              least have in order to be considered hot (used in non-LTO mode).
  --param=hot-bb-count-ws-permille=<0,1000> The number of most executed permilles of the profiled
                              execution of the entire program to which the execution count of a basic
                              block must be part of in order to be considered hot (used in LTO mode).
  --param=hot-bb-frequency-fraction= The denominator n of fraction 1/n of the execution frequency of
                              the entry block of a function that a basic block of this function needs
                              to at least have in order to be considered hot.
  --param=hwasan-instrument-allocas=<0,1> Enable hwasan instrumentation of allocas/VLAs.
  --param=hwasan-instrument-mem-intrinsics=<0,1> Enable hwasan instrumentation of builtin functions.
  --param=hwasan-instrument-reads=<0,1> Enable hwasan instrumentation of load operations.
  --param=hwasan-instrument-stack=<0,1> Enable hwasan instrumentation of statically sized stack-
                              allocated variables.
  --param=hwasan-instrument-writes=<0,1> Enable hwasan instrumentation of store operations.
  --param=hwasan-random-frame-tag=<0,1> Use random base tag for each frame, as opposed to base always
                              zero.
  --param=inline-heuristics-hint-percent=<100,1000000> The scale (in percents) applied to inline-
                              insns-single and auto limits when heuristics hints that inlining is
                              very profitable.
  --param=inline-min-speedup=<0,100> The minimal estimated speedup allowing inliner to ignore inline-
                              insns-single and inline-insns-auto.
  --param=inline-unit-growth= How much can given compilation unit grow because of the inlining (in
                              percent).
  --param=integer-share-limit=<2,65536> The upper bound for sharing integer constants.
  --param=ipa-cp-eval-threshold= Threshold ipa-cp opportunity evaluation that is still considered
                              beneficial to clone.
  --param=ipa-cp-large-unit-insns= The size of translation unit that IPA-CP pass considers large.
  --param=ipa-cp-loop-hint-bonus= Compile-time bonus IPA-CP assigns to candidates which make loop
                              bounds or strides known.
  --param=ipa-cp-max-recursive-depth= Maximum depth of recursive cloning for self-recursive function.
  --param=ipa-cp-min-recursive-probability= Recursive cloning only when the probability of call being
                              executed exceeds the parameter.
  --param=ipa-cp-recursion-penalty=<0,100> Percentage penalty the recursive functions will receive
                              when they are evaluated for cloning.
  --param=ipa-cp-single-call-penalty=<0,100> Percentage penalty functions containing a single call to
                              another function will receive when they are evaluated for cloning.
  --param=ipa-cp-unit-growth= How much can given compilation unit grow because of the interprocedural
                              constant propagation (in percent).
  --param=ipa-cp-value-list-size= Maximum size of a list of values associated with each parameter for
                              interprocedural constant propagation.
  --param=ipa-jump-function-lookups= Maximum number of statements visited during jump function offset
                              discovery.
  --param=ipa-max-aa-steps=   Maximum number of statements that will be visited by IPA formal
                              parameter analysis based on alias analysis in any given function.
  --param=ipa-max-agg-items=  Maximum number of aggregate content items for a parameter in jump
                              functions and lattices.
  --param=ipa-max-loop-predicates= Maximum number of different predicates used to track properties of
                              loops in IPA analysis.
  --param=ipa-max-param-expr-ops= Maximum number of operations in a parameter expression that can be
                              handled by IPA analysis.
  --param=ipa-max-switch-predicate-bounds= Maximal number of boundary endpoints of case ranges of
                              switch statement used during IPA function summary generation.
  --param=ipa-sra-max-replacements=<0,16> Maximum pieces that IPA-SRA tracks per formal parameter, as
                              a consequence, also the maximum number of replacements of a formal
                              parameter.
  --param=ipa-sra-ptr-growth-factor= Maximum allowed growth of number and total size of new
                              parameters that ipa-sra replaces a pointer to an aggregate with.
  --param=ira-loop-reserved-regs= The number of registers in each class kept unused by loop invariant
                              motion.
  --param=ira-max-conflict-table-size= Max size of conflict table in MB.
  --param=ira-max-loops-num=  Max loops number for regional RA.
  --param=iv-always-prune-cand-set-bound= If number of candidates in the set is smaller, we always
                              try to remove unused ivs during its optimization.
  --param=iv-consider-all-candidates-bound= Bound on number of candidates below that all candidates
                              are considered in iv optimizations.
  --param=iv-max-considered-uses= Bound on number of iv uses in loop optimized in iv optimizations.
  --param=jump-table-max-growth-ratio-for-size= The maximum code size growth ratio when expanding
                              into a jump table (in percent).  The parameter is used when optimizing
                              for size.
  --param=jump-table-max-growth-ratio-for-speed= The maximum code size growth ratio when expanding
                              into a jump table (in percent).  The parameter is used when optimizing
                              for speed.
  --param=l1-cache-line-size= The size of L1 cache line.
  --param=l1-cache-size=      The size of L1 cache.
  --param=l2-cache-size=      The size of L2 cache.
  --param=large-function-growth= Maximal growth due to inlining of large function (in percent).
  --param=large-function-insns= The size of function body to be considered large.
  --param=large-stack-frame-growth= Maximal stack frame growth due to inlining (in percent).
  --param=large-stack-frame=  The size of stack frame to be considered large.
  --param=large-unit-insns=   The size of translation unit to be considered large.
  --param=lazy-modules=       Maximum number of concurrently open C++ module files when lazy loading.
  --param=lim-expensive=      The minimum cost of an expensive expression in the loop invariant
                              motion.
  --param=logical-op-non-short-circuit=<-1,1> True if a non-short-circuit operation is optimal.
  --param=loop-block-tile-size= Size of tiles for loop blocking.
  --param=loop-interchange-max-num-stmts= The maximum number of stmts in loop nest for loop
                              interchange.
  --param=loop-interchange-stride-ratio= The minimum stride ratio for loop interchange to be
                              profitable.
  --param=loop-invariant-max-bbs-in-loop= Max basic blocks number in loop for loop invariant motion.
  --param=loop-max-datarefs-for-datadeps= Maximum number of datarefs in loop for building loop data
                              dependencies.
  --param=loop-versioning-max-inner-insns= The maximum number of instructions in an inner loop that
                              is being considered for versioning.
  --param=loop-versioning-max-outer-insns= The maximum number of instructions in an outer loop that
                              is being considered for versioning, on top of the instructions in inner
                              loops.
  --param=lra-inheritance-ebb-probability-cutoff=<0,100> Minimal fall-through edge probability in
                              percentage used to add BB to inheritance EBB in LRA.
  --param=lra-max-considered-reload-pseudos= The max number of reload pseudos which are considered
                              during spilling a non-reload pseudo.
  --param=lto-max-partition=  Maximal size of a partition for LTO (in estimated instructions).
  --param=lto-max-streaming-parallelism=<1,65536> maximal number of LTO partitions streamed in
                              parallel.
  --param=lto-min-partition=  Minimal size of a partition for LTO (in estimated instructions).
  --param=lto-partitions=<1,65536> Number of partitions the program should be split to.
  --param=max-average-unrolled-insns= The maximum number of instructions to consider to unroll in a
                              loop on average.
  --param=max-combine-insns=<2,4> The maximum number of insns combine tries to combine.
  --param=max-completely-peel-loop-nest-depth= The maximum depth of a loop nest we completely peel.
  --param=max-completely-peel-times= The maximum number of peelings of a single loop that is peeled
                              completely.
  --param=max-completely-peeled-insns= The maximum number of insns of a completely peeled loop.
  --param=max-crossjump-edges= The maximum number of incoming edges to consider for crossjumping.
  --param=max-cse-insns=      The maximum instructions CSE process before flushing.
  --param=max-cse-path-length=<1,65536> The maximum length of path considered in cse.
  --param=max-cselib-memory-locations= The maximum memory locations recorded by cselib.
  --param=max-debug-marker-count= Max. count of debug markers to expand or inline.
  --param=max-delay-slot-insn-search= The maximum number of instructions to consider to fill a delay
                              slot.
  --param=max-delay-slot-live-search= The maximum number of instructions to consider to find accurate
                              live register information.
  --param=max-dse-active-local-stores= Maximum number of active local stores in RTL dead store
                              elimination.
  --param=max-early-inliner-iterations= The maximum number of nested indirect inlining performed by
                              early inliner.
  --param=max-fields-for-field-sensitive= Maximum number of fields in a structure before pointer
                              analysis treats the structure as a single variable.
  --param=max-find-base-term-values= Maximum number of VALUEs handled during a single find_base_term
                              call.
  --param=max-fsm-thread-length=<1,999999> Maximum number of basic blocks on a finite state automaton
                              jump thread path.
  --param=max-fsm-thread-path-insns=<1,999999> Maximum number of instructions to copy when
                              duplicating blocks on a finite state automaton jump thread path.
  --param=max-fsm-thread-paths=<1,999999> Maximum number of new jump thread paths to create for a
                              finite state automaton.
  --param=max-gcse-insertion-ratio= The maximum ratio of insertions to deletions of expressions in
                              GCSE.
  --param=max-gcse-memory=    The maximum amount of memory to be allocated by GCSE, in kilobytes.
  --param=max-goto-duplication-insns= The maximum number of insns to duplicate when unfactoring
                              computed gotos.
  --param=max-grow-copy-bb-insns= The maximum expansion factor when copying basic blocks.
  --param=max-hoist-depth=    Maximum depth of search in the dominator tree for expressions to hoist.
  --param=max-inline-insns-auto= The maximum number of instructions when automatically inlining.
  --param=max-inline-insns-recursive-auto= The maximum number of instructions non-inline function can
                              grow to via recursive inlining.
  --param=max-inline-insns-recursive= The maximum number of instructions inline function can grow to
                              via recursive inlining.
  --param=max-inline-insns-single= The maximum number of instructions in a single function eligible
                              for inlining.
  --param=max-inline-insns-size= The maximum number of instructions when inlining for size.
  --param=max-inline-insns-small= The maximum number of instructions when automatically inlining
                              small functions.
  --param=max-inline-recursive-depth-auto= The maximum depth of recursive inlining for non-inline
                              functions.
  --param=max-inline-recursive-depth= The maximum depth of recursive inlining for inline functions.
  --param=max-isl-operations= Maximum number of isl operations, 0 means unlimited.
  --param=max-iterations-computation-cost= Bound on the cost of an expression to compute the number
                              of iterations.
  --param=max-iterations-to-track= Bound on the number of iterations the brute force # of iterations
                              analysis algorithm evaluates.
  --param=max-jump-thread-duplication-stmts= Maximum number of statements allowed in a block that
                              needs to be duplicated when threading jumps.
  --param=max-last-value-rtl= The maximum number of RTL nodes that can be recorded as combiner's last
                              value.
  --param=max-loop-header-insns= The maximum number of insns in loop header duplicated by the copy
                              loop headers pass.
  --param=max-modulo-backtrack-attempts= The maximum number of backtrack attempts the scheduler
                              should make when modulo scheduling a loop.
  --param=max-partial-antic-length= Maximum length of partial antic set when performing tree pre
                              optimization.
  --param=max-peel-branches=  The maximum number of branches on the path through the peeled sequence.
  --param=max-peel-times=     The maximum number of peelings of a single loop.
  --param=max-peeled-insns=   The maximum number of insns of a peeled loop.
  --param=max-pending-list-length= The maximum length of scheduling's pending operations list.
  --param=max-pipeline-region-blocks= The maximum number of blocks in a region to be considered for
                              interblock scheduling.
  --param=max-pipeline-region-insns= The maximum number of insns in a region to be considered for
                              interblock scheduling.
  --param=max-pow-sqrt-depth=<1,32> Maximum depth of sqrt chains to use when synthesizing
                              exponentiation by a real constant.
  --param=max-predicted-iterations=<0,65536> The maximum number of loop iterations we predict
                              statically.
  --param=max-reload-search-insns= The maximum number of instructions to search backward when looking
                              for equivalent reload.
  --param=max-rtl-if-conversion-insns=<0,99> Maximum number of insns in a basic block to consider for
                              RTL if-conversion.
  --param=max-rtl-if-conversion-predictable-cost=<0,200> Maximum permissible cost for the sequence
                              that would be generated by the RTL if-conversion pass for a branch that
                              is considered predictable.
  --param=max-rtl-if-conversion-unpredictable-cost=<0,200> Maximum permissible cost for the sequence
                              that would be generated by the RTL if-conversion pass for a branch that
                              is considered unpredictable.
  --param=max-sched-extend-regions-iters= The maximum number of iterations through CFG to extend
                              regions.
  --param=max-sched-insn-conflict-delay=<1,10> The maximum conflict delay for an insn to be
                              considered for speculative motion.
  --param=max-sched-ready-insns=<1,65536> The maximum number of instructions ready to be issued to be
                              considered by the scheduler during the first scheduling pass.
  --param=max-sched-region-blocks= The maximum number of blocks in a region to be considered for
                              interblock scheduling.
  --param=max-sched-region-insns= The maximum number of insns in a region to be considered for
                              interblock scheduling.
  --param=max-slsr-cand-scan=<1,999999> Maximum length of candidate scans for straight-line strength
                              reduction.
  --param=max-speculative-devirt-maydefs= Maximum number of may-defs visited when devirtualizing
                              speculatively.
  --param=max-ssa-name-query-depth=<1,10> Maximum recursion depth allowed when querying a property of
                              an SSA name.
  --param=max-store-chains-to-track=<1,65536> Maximum number of store chains to track at the same
                              time in the store merging pass.
  --param=max-stores-to-merge=<2,65536> Maximum number of constant stores to merge in the store
                              merging pass.
  --param=max-stores-to-sink= Maximum number of conditional store pairs that can be sunk.
  --param=max-stores-to-track=<2,1048576> Maximum number of store chains to track at the same time in
                              the store merging pass.
  --param=max-tail-merge-comparisons= Maximum amount of similar bbs to compare a bb with.
  --param=max-tail-merge-iterations= Maximum amount of iterations of the pass over a function.
  --param=max-tracked-strlens= Maximum number of strings for which strlen optimization pass will
                              track string lengths.
  --param=max-tree-if-conversion-phi-args=<2,65536> Maximum number of arguments in a PHI supported by
                              TREE if-conversion unless the loop is marked with simd pragma.
  --param=max-unroll-times=   The maximum number of unrollings of a single loop.
  --param=max-unrolled-insns= The maximum number of instructions to consider to unroll in a loop.
  --param=max-unswitch-insns= The maximum number of insns of an unswitched loop.
  --param=max-unswitch-level= The maximum number of unswitchings in a single loop.
  --param=max-variable-expansions-in-unroller= If -fvariable-expansion-in-unroller is used, the
                              maximum number of times that an individual variable will be expanded
                              during loop unrolling.
  --param=max-vartrack-expr-depth= Max. recursion depth for expanding var tracking expressions.
  --param=max-vartrack-reverse-op-size= Max. size of loc list for which reverse ops should be added.
  --param=max-vartrack-size=  Max. size of var tracking hash tables.
  --param=max-vrp-switch-assertions= Maximum number of assertions to add along the default edge of a
                              switch statement during VRP.
  --param=min-crossjump-insns=<1,65536> The minimum number of matching instructions to consider for
                              crossjumping.
  --param=min-inline-recursive-probability= Inline recursively only when the probability of call
                              being executed exceeds the parameter.
  --param=min-insn-to-prefetch-ratio= Min. ratio of insns to prefetches to enable prefetching for a
                              loop with an unknown trip count.
  --param=min-loop-cond-split-prob=<0,100> The minimum threshold for probability of semi-invariant
                              condition statement to trigger loop split.
  --param=min-nondebug-insn-uid= The minimum UID to be used for a nondebug insn.
  --param=min-size-for-stack-sharing= The minimum size of variables taking part in stack slot sharing
                              when not optimizing.
  --param=min-spec-prob=      The minimum probability of reaching a source block for interblock
                              speculative scheduling.
  --param=min-vect-loop-bound= If -ftree-vectorize is used, the minimal loop bound of a loop to be
                              considered for vectorization.
  --param=modref-max-accesses= Maximum number of accesses stored in each modref reference.
  --param=modref-max-bases=   Maximum number of bases stored in each modref tree.
  --param=modref-max-depth=   Maximum depth of DFS walk used by modref escape analysis.
  --param=modref-max-escape-points= Maximum number of escape points tracked by modref per SSA-name.
  --param=modref-max-refs=    Maximum number of references stored in each modref base.
  --param=modref-max-tests=   Maximum number of tests performed by modref query.
  --param=openacc-kernels=[decompose|parloops] Specify mode of OpenACC 'kernels' constructs handling.
  --param=parloops-chunk-size= Chunk size of omp schedule for loops parallelized by parloops.
  --param=parloops-min-per-thread=<2,65536> Minimum number of iterations per thread of an innermost
                              parallelized loop.
  --param=parloops-schedule=[static|dynamic|guided|auto|runtime] Schedule type of omp schedule for
                              loops parallelized by parloops.
  --param=partial-inlining-entry-probability=<0,100> Maximum probability of the entry BB of split
                              region (in percent relative to entry BB of the function) to make
                              partial inlining happen.
  --param=predictable-branch-outcome=<0,50> Maximal estimated outcome of branch considered
                              predictable.
  --param=prefetch-dynamic-strides=<0,1> Whether software prefetch hints should be issued for non-
                              constant strides.
  --param=prefetch-latency=   The number of insns executed before prefetch is completed.
  --param=prefetch-min-insn-to-mem-ratio= Min. ratio of insns to mem ops to enable prefetching in a
                              loop.
  --param=prefetch-minimum-stride= The minimum constant stride beyond which we should use prefetch
                              hints for.
  --param=profile-func-internal-id=<0,1> Use internal function id in profile lookup.
  --param=ranger-logical-depth=<1,999> Maximum depth of logical expression evaluation ranger will
                              look through when evaluating outgoing edge ranges.
  --param=rpo-vn-max-loop-depth=<2,65536> Maximum depth of a loop nest to fully value-number
                              optimistically.
  --param=sccvn-max-alias-queries-per-access= Maximum number of disambiguations to perform per memory
                              access.
  --param=scev-max-expr-complexity= Bound on the complexity of the expressions in the scalar
                              evolutions analyzer.
  --param=scev-max-expr-size= Bound on size of expressions used in the scalar evolutions analyzer.
  --param=sched-autopref-queue-depth= Hardware autoprefetcher scheduler model control flag.  Number
                              of lookahead cycles the model looks into, at '0' only enable
                              instruction sorting heuristic.  Disabled by default.
  --param=sched-mem-true-dep-cost= Minimal distance between possibly conflicting store and load.
  --param=sched-pressure-algorithm=<1,2> Which -fsched-pressure algorithm to apply.
  --param=sched-spec-prob-cutoff=<0,100> The minimal probability of speculation success (in
                              percents), so that speculative insn will be scheduled.
  --param=sched-state-edge-prob-cutoff=<0,100> The minimum probability an edge must have for the
                              scheduler to save its state across it.
  --param=selsched-insns-to-rename= Maximum number of instructions in the ready list that are
                              considered eligible for renaming.
  --param=selsched-max-lookahead= The maximum size of the lookahead window of selective scheduling.
  --param=selsched-max-sched-times=<1,65536> Maximum number of times that an insn could be scheduled.
  --param=simultaneous-prefetches= The number of prefetches that can run at the same time.
  --param=sink-frequency-threshold=<0,100> Target block's relative execution frequency (as a
                              percentage) required to sink a statement.
  --param=sms-dfa-history=<0,16> The number of cycles the swing modulo scheduler considers when
                              checking conflicts using DFA.
  --param=sms-loop-average-count-threshold= A threshold on the average loop count considered by the
                              swing modulo scheduler.
  --param=sms-max-ii-factor=<1,16> A factor for tuning the upper bound that swing modulo scheduler
                              uses for scheduling a loop.
  --param=sms-min-sc=<1,2>    The minimum value of stage count that swing modulo scheduler will
                              generate.
  --param=sra-max-propagations= Maximum number of artificial accesses to enable forward propagation
                              that Scalar Replacement of Aggregates will keep for one local variable.
  --param=sra-max-scalarization-size-Osize= Maximum size, in storage units, of an aggregate which
                              should be considered for scalarization when compiling for size.
  --param=sra-max-scalarization-size-Ospeed= Maximum size, in storage units, of an aggregate which
                              should be considered for scalarization when compiling for speed.
  --param=ssa-name-def-chain-limit= The maximum number of SSA_NAME assignments to follow in
                              determining a value.
  --param=ssp-buffer-size=<1,65536> The lower bound for a buffer to be considered for stack smashing
                              protection.
  --param=stack-clash-protection-guard-size=<12,30> Size of the stack guard expressed as a power of
                              two in bytes.
  --param=stack-clash-protection-probe-interval=<10,16> Interval in which to probe the stack
                              expressed as a power of two in bytes.
  --param=store-merging-allow-unaligned=<0,1> Allow the store merging pass to introduce unaligned
                              stores if it is legal to do so.
  --param=store-merging-max-size=<1,65536> Maximum size of a single store merging region in bytes.
  --param=switch-conversion-max-branch-ratio=<1,65536> The maximum ratio between array size and
                              switch branches for a switch conversion to take place.
  --param=tm-max-aggregate-size= Size in bytes after which thread-local aggregates should be
                              instrumented with the logging functions instead of save/restore pairs.
  --param=tracer-dynamic-coverage-feedback=<0,100> The percentage of function, weighted by execution
                              frequency, that must be covered by trace formation. Used when profile
                              feedback is available.
  --param=tracer-dynamic-coverage=<0,100> The percentage of function, weighted by execution
                              frequency, that must be covered by trace formation. Used when profile
                              feedback is not available.
  --param=tracer-max-code-growth= Maximal code growth caused by tail duplication (in percent).
  --param=tracer-min-branch-probability-feedback=<0,100> Stop forward growth if the probability of
                              best edge is less than this threshold (in percent). Used when profile
                              feedback is available.
  --param=tracer-min-branch-probability=<0,100> Stop forward growth if the probability of best edge
                              is less than this threshold (in percent). Used when profile feedback is
                              not available.
  --param=tracer-min-branch-ratio=<0,100> Stop reverse growth if the reverse probability of best edge
                              is less than this threshold (in percent).
  --param=tree-reassoc-width= Set the maximum number of instructions executed in parallel in
                              reassociated tree.  If 0, use the target dependent heuristic.
  --param=tsan-distinguish-volatile=<0,1> Emit special instrumentation for accesses to volatiles.
  --param=tsan-instrument-func-entry-exit=<0,1> Emit instrumentation calls to __tsan_func_entry() and
                              __tsan_func_exit().
  --param=uninit-control-dep-attempts=<1,65536> Maximum number of nested calls to search for control
                              dependencies during uninitialized variable analysis.
  --param=uninlined-function-insns=<0,1000000> Instruction accounted for function prologue, epilogue
                              and other overhead.
  --param=uninlined-function-time=<0,1000000> Time accounted for function prologue, epilogue and
                              other overhead.
  --param=uninlined-thunk-insns=<0,1000000> Instruction accounted for function thunk overhead.
  --param=uninlined-thunk-time=<0,1000000> Time accounted for function thunk overhead.
  --param=unlikely-bb-count-fraction= The denominator n of fraction 1/n of the number of profiled
                              runs of the entire program below which the execution count of a basic
                              block must be in order for the basic block to be considered unlikely.
  --param=unroll-jam-max-unroll= Maximum unroll factor for the unroll-and-jam transformation.
  --param=unroll-jam-min-percent=<0,100> Minimum percentage of memrefs that must go away for unroll-
                              and-jam to be considered profitable.
  --param=use-after-scope-direct-emission-threshold= Use direct poisoning/unpoisoning instructions
                              for variables smaller or equal to this number.
  --param=use-canonical-types=<0,1> Whether to use canonical types.
  --param=vect-epilogues-nomask=<0,1> Enable loop epilogue vectorization using smaller vector size.
  --param=vect-max-peeling-for-alignment=<-1,64> Maximum number of loop peels to enhance alignment of
                              data references in a loop.
  --param=vect-max-version-for-alias-checks= Bound on number of runtime checks inserted by the
                              vectorizer's loop versioning for alias check.
  --param=vect-max-version-for-alignment-checks= Bound on number of runtime checks inserted by the
                              vectorizer's loop versioning for alignment check.
  --param=vect-partial-vector-usage=<0,2> Controls how loop vectorizer uses partial vectors.  0 means
                              never, 1 means only for loops whose need to iterate can be removed, 2
                              means for all loops.  The default value is 2.

The following options are target specific:
  -m128bit-long-double        sizeof(long double) is 16.
  -m16                        Generate 16bit i386 code.
  -m32                        Generate 32bit i386 code.
  -m3dnow                     Support 3DNow! built-in functions.
  -m3dnowa                    Support Athlon 3Dnow! built-in functions.
  -m64                        Generate 64bit x86-64 code.
  -m80387                     Use hardware fp.
  -m8bit-idiv                 Expand 32bit/64bit integer divide into 8bit unsigned integer divide
                              with run-time check.
  -m96bit-long-double         sizeof(long double) is 12.
  -mabi=                      Generate code that conforms to the given ABI.
  -mabm                       Support code generation of Advanced Bit Manipulation (ABM) instructions.
  -maccumulate-outgoing-args  Reserve space for outgoing arguments in the function prologue.
  -maddress-mode=             Use given address mode.
  -madx                       Support flag-preserving add-carry instructions.
  -maes                       Support AES built-in functions and code generation.
  -malign-data=               Use the given data alignment.
  -malign-double              Align some doubles on dword boundary.
  -malign-functions=          Function starts are aligned to this power of 2.
  -malign-jumps=              Jump targets are aligned to this power of 2.
  -malign-loops=              Loop code aligned to this power of 2.
  -malign-stringops           Align destination of the string operations.
  -mamx-bf16                  Support AMX-BF16 built-in functions and code generation.
  -mamx-int8                  Support AMX-INT8 built-in functions and code generation.
  -mamx-tile                  Support AMX-TILE built-in functions and code generation.
  -mandroid                   Generate code for the Android platform.
  -march=                     Generate code for given CPU.
  -masm=                      Use given assembler dialect.
  -mavx                       Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2 and AVX built-in
                              functions and code generation.
  -mavx2                      Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX and AVX2 built-
                              in functions and code generation.
  -mavx256-split-unaligned-load Split 32-byte AVX unaligned load.
  -mavx256-split-unaligned-store Split 32-byte AVX unaligned store.
  -mavx5124fmaps              Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F
                              and AVX5124FMAPS built-in functions and code generation.
  -mavx5124vnniw              Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F
                              and AVX5124VNNIW built-in functions and code generation.
  -mavx512bf16                Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F
                              and AVX512BF16 built-in functions and code generation.
  -mavx512bitalg              Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F
                              and AVX512BITALG built-in functions and code generation.
  -mavx512bw                  Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and
                              AVX512F and AVX512BW built-in functions and code generation.
  -mavx512cd                  Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and
                              AVX512F and AVX512CD built-in functions and code generation.
  -mavx512dq                  Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and
                              AVX512F and AVX512DQ built-in functions and code generation.
  -mavx512er                  Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and
                              AVX512F and AVX512ER built-in functions and code generation.
  -mavx512f                   Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and
                              AVX512F built-in functions and code generation.
  -mavx512ifma                Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and
                              AVX512F and AVX512IFMA built-in functions and code generation.
  -mavx512pf                  Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and
                              AVX512F and AVX512PF built-in functions and code generation.
  -mavx512vbmi                Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and
                              AVX512F and AVX512VBMI built-in functions and code generation.
  -mavx512vbmi2               Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F
                              and AVX512VBMI2 built-in functions and code generation.
  -mavx512vl                  Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and
                              AVX512F and AVX512VL built-in functions and code generation.
  -mavx512vnni                Support AVX512VNNI built-in functions and code generation.
  -mavx512vp2intersect        Support AVX512VP2INTERSECT built-in functions and code generation.
  -mavx512vpopcntdq           Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F
                              and AVX512VPOPCNTDQ built-in functions and code generation.
  -mavxvnni                   Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, and
                              AVXVNNI built-in functions and code generation.
  -mbionic                    Use Bionic C library.
  -mbmi                       Support BMI built-in functions and code generation.
  -mbmi2                      Support BMI2 built-in functions and code generation.
  -mbranch-cost=<0,5>         Branches are this expensive (arbitrary units).
  -mcall-ms2sysv-xlogues      Use libgcc stubs to save and restore registers clobbered by 64-bit
                              Microsoft to System V ABI calls.
  -mcet-switch                Turn on CET instrumentation for switch statements that use a jump table
                              and an indirect jump.
  -mcld                       Generate cld instruction in the function prologue.
  -mcldemote                  Support CLDEMOTE built-in functions and code generation.
  -mclflushopt                Support CLFLUSHOPT instructions.
  -mclwb                      Support CLWB instruction.
  -mclzero                    Support CLZERO built-in functions and code generation.
  -mcmodel=                   Use given x86-64 code model.
  -mcpu=                      Same as -mtune=.  Uses of this option are diagnosed.
  -mcrc32                     Support code generation of crc32 instruction.
  -mcx16                      Support code generation of cmpxchg16b instruction.
  -mdispatch-scheduler        Do dispatch scheduling if processor is bdver1, bdver2, bdver3, bdver4
                              or znver1 and Haifa scheduling is selected.
  -mdump-tune-features        This option lacks documentation.
  -menqcmd                    Support ENQCMD built-in functions and code generation.
  -mf16c                      Support F16C built-in functions and code generation.
  -mfancy-math-387            Generate sin, cos, sqrt for FPU.
  -mfentry                    Emit profiling counter call at function entry before prologue.
  -mfentry-name=              Set name of __fentry__ symbol called at function entry.
  -mfentry-section=           Set name of section to record mrecord-mcount calls.
  -mfma                       Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX and FMA built-
                              in functions and code generation.
  -mfma4                      Support FMA4 built-in functions and code generation.
  -mforce-drap                Always use Dynamic Realigned Argument Pointer (DRAP) to realign stack.
  -mforce-indirect-call       Make all function calls indirect.
  -mfp-ret-in-387             Return values of functions in FPU registers.
  -mfpmath=                   Generate floating point mathematics using given instruction set.
  -mfsgsbase                  Support FSGSBASE built-in functions and code generation.
  -mfunction-return=          Convert function return to call and return thunk.
  -mfused-madd                Same as -ffp-contract=fast (or, in negated form, -ffp-contract=off). 
                              Uses of this option are diagnosed.
  -mfxsr                      Support FXSAVE and FXRSTOR instructions.
  -mgeneral-regs-only         Generate code which uses only the general registers.
  -mgfni                      Support GFNI built-in functions and code generation.
  -mglibc                     Use GNU C library.
  -mhard-float                Use hardware fp.
  -mharden-sls=               Generate code to mitigate against straight line speculation.
  -mhle                       Support Hardware Lock Elision prefixes.
  -mhreset                    Support HRESET built-in functions and code generation.
  -miamcu                     Generate code that conforms to Intel MCU psABI.
  -mieee-fp                   Use IEEE math for fp comparisons.
  -mincoming-stack-boundary=  Assume incoming stack aligned to this power of 2.
  -mindirect-branch-cs-prefix Add CS prefix to call and jmp to indirect thunk with branch target in
                              r8-r15 registers.
  -mindirect-branch-register  Force indirect call and jump via register.
  -mindirect-branch=          Convert indirect call and jump to call and return thunks.
  -minline-all-stringops      Inline all known string operations.
  -minline-stringops-dynamically Inline memset/memcpy string operations, but perform inline version
                              only for small blocks.
  -minstrument-return=        Instrument function exit in instrumented functions with __fentry__.
  -mintel-syntax              Same as -masm=intel (or, in negated form, -masm=att).  Uses of this
                              option are diagnosed.
  -mkl                        Support KL built-in functions and code generation.
  -mlarge-data-threshold=<number> Data greater than given threshold will go into .ldata section in
                              x86-64 medium model.
  -mlong-double-128           Use 128-bit long double.
  -mlong-double-64            Use 64-bit long double.
  -mlong-double-80            Use 80-bit long double.
  -mlwp                       Support LWP built-in functions and code generation.
  -mlzcnt                     Support LZCNT built-in function and code generation.
  -mmanual-endbr              Insert ENDBR instruction at function entry only via cf_check attribute
                              for CET instrumentation.
  -mmemcpy-strategy=          Specify memcpy expansion strategy when expected size is known.
  -mmemset-strategy=          Specify memset expansion strategy when expected size is known.
  -mmitigate-rop              This option lacks documentation.
  -mmmx                       Support MMX built-in functions.
  -mmovbe                     Support code generation of movbe instruction.
  -mmovdir64b                 Support MOVDIR64B built-in functions and code generation.
  -mmovdiri                   Support MOVDIRI built-in functions and code generation.
  -mmpx                       Removed in GCC 9.  This switch has no effect.
  -mms-bitfields              Use native (MS) bitfield layout.
  -mmusl                      Use musl C library.
  -mmwait                     Support MWAIT and MONITOR built-in functions and code generation.
  -mmwaitx                    Support MWAITX and MONITORX built-in functions and code generation.
  -mneeded                    Emit GNU_PROPERTY_X86_ISA_1_NEEDED GNU property.
  -mno-align-stringops        This option lacks documentation.
  -mno-default                Clear all tune features.
  -mno-fancy-math-387         This option lacks documentation.
  -mno-push-args              This option lacks documentation.
  -mno-red-zone               This option lacks documentation.
  -mno-sse4                   Do not support SSE4.1 and SSE4.2 built-in functions and code generation.
  -mnop-mcount                Generate mcount/__fentry__ calls as nops. To activate they need to be
                              patched in.
  -momit-leaf-frame-pointer   Omit the frame pointer in leaf functions.
  -mpc32                      Set 80387 floating-point precision to 32-bit.
  -mpc64                      Set 80387 floating-point precision to 64-bit.
  -mpc80                      Set 80387 floating-point precision to 80-bit.
  -mpclmul                    Support PCLMUL built-in functions and code generation.
  -mpcommit                   This option lacks documentation.
  -mpconfig                   Support PCONFIG built-in functions and code generation.
  -mpku                       Support PKU built-in functions and code generation.
  -mpopcnt                    Support code generation of popcnt instruction.
  -mprefer-avx128             Use 128-bit AVX instructions instead of 256-bit AVX instructions in the
                              auto-vectorizer.  Same as -mprefer-vector-width=.
  -mprefer-vector-width=      Use given register vector width instructions instead of maximum
                              register width in the auto-vectorizer.
  -mpreferred-stack-boundary= Attempt to keep stack aligned to this power of 2.
  -mprefetchwt1               Support PREFETCHWT1 built-in functions and code generation.
  -mprfchw                    Support PREFETCHW instruction.
  -mptwrite                   Support PTWRITE built-in functions and code generation.
  -mpush-args                 Use push instructions to save outgoing arguments.
  -mrdpid                     Support RDPID built-in functions and code generation.
  -mrdrnd                     Support RDRND built-in functions and code generation.
  -mrdseed                    Support RDSEED instruction.
  -mrecip                     Generate reciprocals instead of divss and sqrtss.
  -mrecip=                    Control generation of reciprocal estimates.
  -mrecord-mcount             Generate __mcount_loc section with all mcount or __fentry__ calls.
  -mrecord-return             Generate a __return_loc section pointing to all return instrumentation
                              code.
  -mred-zone                  Use red-zone in the x86-64 code.
  -mregparm=                  Number of registers used to pass integer arguments.
  -mrtd                       Alternate calling convention.
  -mrtm                       Support RTM built-in functions and code generation.
  -msahf                      Support code generation of sahf instruction in 64bit x86-64 code.
  -mserialize                 Support SERIALIZE built-in functions and code generation.
  -msgx                       Support SGX built-in functions and code generation.
  -msha                       Support SHA1 and SHA256 built-in functions and code generation.
  -mshstk                     Enable shadow stack built-in functions from Control-flow Enforcement
                              Technology (CET).
  -mskip-rax-setup            Skip setting up RAX register when passing variable arguments.
  -msoft-float                Do not use hardware fp.
  -msse                       Support MMX and SSE built-in functions and code generation.
  -msse2                      Support MMX, SSE and SSE2 built-in functions and code generation.
  -msse2avx                   Encode SSE instructions with VEX prefix.
  -msse3                      Support MMX, SSE, SSE2 and SSE3 built-in functions and code generation.
  -msse4                      Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1 and SSE4.2 built-in
                              functions and code generation.
  -msse4.1                    Support MMX, SSE, SSE2, SSE3, SSSE3 and SSE4.1 built-in functions and
                              code generation.
  -msse4.2                    Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1 and SSE4.2 built-in
                              functions and code generation.
  -msse4a                     Support MMX, SSE, SSE2, SSE3 and SSE4A built-in functions and code
                              generation.
  -msse5                      Same as -mavx.  Uses of this option are diagnosed.
  -msseregparm                Use SSE register passing conventions for SF and DF mode.
  -mssse3                     Support MMX, SSE, SSE2, SSE3 and SSSE3 built-in functions and code
                              generation.
  -mstack-arg-probe           Enable stack probing.
  -mstack-protector-guard-offset= Use the given offset for addressing the stack-protector guard.
  -mstack-protector-guard-reg= Use the given base register for addressing the stack-protector guard.
  -mstack-protector-guard-symbol= Use the given symbol for addressing the stack-protector guard.
  -mstack-protector-guard=    Use given stack-protector guard.
  -mstackrealign              Realign stack in prologue.
  -mstringop-strategy=        Chose strategy to generate stringop using.
  -mstv                       Disable Scalar to Vector optimization pass transforming 64-bit integer
                              computations into a vector ones.
  -mtbm                       Support TBM built-in functions and code generation.
  -mtls-dialect=              Use given thread-local storage dialect.
  -mtls-direct-seg-refs       Use direct references against %gs when accessing tls data.
  -mtsxldtrk                  Support TSXLDTRK built-in functions and code generation.
  -mtune-ctrl=                Fine grain control of tune features.
  -mtune=                     Schedule code for given CPU.
  -muclibc                    Use uClibc C library.
  -muintr                     Support UINTR built-in functions and code generation.
  -mvaes                      Support VAES built-in functions and code generation.
  -mveclibabi=                Vector library ABI to use.
  -mvect8-ret-in-mem          Return 8-byte vectors in memory.
  -mvpclmulqdq                Support VPCLMULQDQ built-in functions and code generation.
  -mvzeroupper                Generate vzeroupper instruction before a transfer of control flow out
                              of the function.
  -mwaitpkg                   Support WAITPKG built-in functions and code generation.
  -mwbnoinvd                  Support WBNOINVD built-in functions and code generation.
  -mwidekl                    Support WIDEKL built-in functions and code generation.
  -mx32                       Generate 32bit x86-64 code.
  -mxop                       Support XOP built-in functions and code generation.
  -mxsave                     Support XSAVE and XRSTOR instructions.
  -mxsavec                    Support XSAVEC instructions.
  -mxsaveopt                  Support XSAVEOPT instruction.
  -mxsaves                    Support XSAVES and XRSTORS instructions.

  Known assembler dialects (for use with the -masm= option):
    att intel

  Known ABIs (for use with the -mabi= option):
    ms sysv

  Known code models (for use with the -mcmodel= option):
    32 kernel large medium small

  Valid arguments to -mfpmath=:
    387 387+sse 387,sse both sse sse+387 sse,387

  Known choices for mitigation against straight line speculation with -mharden-sls=:
    all indirect-jmp none return

  Known indirect branch choices (for use with the -mindirect-branch=/-mfunction-return= options):
    keep thunk thunk-extern thunk-inline

  Known choices for return instrumentation with -minstrument-return=:
    call none nop5

  Known data alignment choices (for use with the -malign-data= option):
    abi cacheline compat

  Known vectorization library ABIs (for use with the -mveclibabi= option):
    acml svml

  Known address mode (for use with the -maddress-mode= option):
    long short

  Known preferred register vector length (to use with the -mprefer-vector-width= option):
    128 256 512 none

  Known stack protector guard (for use with the -mstack-protector-guard= option):
    global tls

  Valid arguments to -mstringop-strategy=:
    byte_loop libcall loop rep_4byte rep_8byte rep_byte unrolled_loop vector_loop

  Known TLS dialects (for use with the -mtls-dialect= option):
    gnu gnu2

  Known valid arguments for -march= option:
    i386 i486 i586 pentium lakemont pentium-mmx winchip-c6 winchip2 c3 samuel-2 c3-2 nehemiah c7 esther i686 pentiumpro pentium2 pentium3 pentium3m pentium-m pentium4 pentium4m prescott nocona core2 nehalem corei7 westmere sandybridge corei7-avx ivybridge core-avx-i haswell core-avx2 broadwell skylake skylake-avx512 cannonlake icelake-client rocketlake icelake-server cascadelake tigerlake cooperlake sapphirerapids alderlake bonnell atom silvermont slm goldmont goldmont-plus tremont knl knm intel geode k6 k6-2 k6-3 athlon athlon-tbird athlon-4 athlon-xp athlon-mp x86-64 x86-64-v2 x86-64-v3 x86-64-v4 eden-x2 nano nano-1000 nano-2000 nano-3000 nano-x2 eden-x4 nano-x4 k8 k8-sse3 opteron opteron-sse3 athlon64 athlon64-sse3 athlon-fx amdfam10 barcelona bdver1 bdver2 bdver3 bdver4 znver1 znver2 znver3 btver1 btver2 generic native

  Known valid arguments for -mtune= option:
    generic i386 i486 pentium lakemont pentiumpro pentium4 nocona core2 nehalem sandybridge haswell bonnell silvermont goldmont goldmont-plus tremont knl knm skylake skylake-avx512 cannonlake icelake-client icelake-server cascadelake tigerlake cooperlake sapphirerapids alderlake rocketlake intel geode k6 athlon k8 amdfam10 bdver1 bdver2 bdver3 bdver4 btver1 btver2 znver1 znver2 znver3

The following options control compiler warning messages:
  --all-warnings              Same as -Wall.
  --extra-warnings            Same as -Wextra.
  -W                          This switch is deprecated; use -Wextra instead.  Same as -Wextra.
  -WNSObject-attribute        Warn if the NSObject attribute is applied to a non-typedef.
  -Wabi                       Warn about things that will change when compiling with an ABI-compliant
                              compiler.
  -Wabi-tag                   Warn if a subobject has an abi_tag attribute that the complete object
                              type does not have.
  -Wabi=                      Warn about things that change between the current -fabi-version and the
                              specified version.
  -Wabsolute-value            Warn on suspicious calls of standard functions computing absolute
                              values.
  -Waddress                   Warn about suspicious uses of memory addresses.
  -Waddress-of-packed-member  Warn when the address of packed member of struct or union is taken.
  -Waggregate-return          Warn about returning structures, unions or arrays.
  -Waggressive-loop-optimizations Warn if a loop with constant number of iterations triggers
                              undefined behavior.
  -Waliasing                  Warn about possible aliasing of dummy arguments.
  -Walign-commons             Warn about alignment of COMMON blocks.
  -Waligned-new=[none|global|all] Warn even if 'new' uses a class member allocation function.
  -Wall                       Enable most warning messages.
  -Walloc-size-larger-than=<bytes> Warn for calls to allocation functions that attempt to allocate
                              objects larger than the specified number of bytes.
  -Walloc-zero                Warn for calls to allocation functions that specify zero bytes.
  -Walloca                    Warn on any use of alloca.
  -Walloca-larger-than=<number> Warn on unbounded uses of alloca, and on bounded uses of alloca whose
                              bound can be larger than <number> bytes.
  -Wampersand                 Warn about missing ampersand in continued character constants.
  -Wanalyzer-double-fclose    Warn about code paths in which a stdio FILE can be closed more than
                              once.
  -Wanalyzer-double-free      Warn about code paths in which a pointer can be freed more than once.
  -Wanalyzer-exposure-through-output-file Warn about code paths in which sensitive data is written to
                              a file.
  -Wanalyzer-file-leak        Warn about code paths in which a stdio FILE is not closed.
  -Wanalyzer-free-of-non-heap Warn about code paths in which a non-heap pointer is freed.
  -Wanalyzer-malloc-leak      Warn about code paths in which a heap-allocated pointer leaks.
  -Wanalyzer-mismatching-deallocation Warn about code paths in which the wrong deallocation function
                              is called.
  -Wanalyzer-null-argument    Warn about code paths in which NULL is passed to a must-not-be-NULL
                              function argument.
  -Wanalyzer-null-dereference Warn about code paths in which a NULL pointer is dereferenced.
  -Wanalyzer-possible-null-argument Warn about code paths in which a possibly-NULL value is passed to
                              a must-not-be-NULL function argument.
  -Wanalyzer-possible-null-dereference Warn about code paths in which a possibly-NULL pointer is
                              dereferenced.
  -Wanalyzer-shift-count-negative Warn about code paths in which a shift with negative count is
                              attempted.
  -Wanalyzer-shift-count-overflow Warn about code paths in which a shift with count >= width of type
                              is attempted.
  -Wanalyzer-stale-setjmp-buffer Warn about code paths in which a longjmp rewinds to a jmp_buf saved
                              in a stack frame that has returned.
  -Wanalyzer-tainted-array-index Warn about code paths in which an unsanitized value is used as an
                              array index.
  -Wanalyzer-too-complex      Warn if the code is too complicated for the analyzer to fully explore.
  -Wanalyzer-unsafe-call-within-signal-handler Warn about code paths in which an async-signal-unsafe
                              function is called from a signal handler.
  -Wanalyzer-use-after-free   Warn about code paths in which a freed value is used.
  -Wanalyzer-use-of-pointer-in-stale-stack-frame Warn about code paths in which a pointer to a stale
                              stack frame is used.
  -Wanalyzer-write-to-const   Warn about code paths which attempt to write to a const object.
  -Wanalyzer-write-to-string-literal Warn about code paths which attempt to write to a string literal.
  -Warith-conversion          Warn if conversion of the result of arithmetic might change the value
                              even though converting the operands cannot.
  -Warray-bounds              Warn if an array is accessed out of bounds.
  -Warray-bounds=<0,2>        Warn if an array is accessed out of bounds.
  -Warray-parameter           Warn about mismatched declarations of array parameters and unsafe
                              accesses to them.  Same as -Warray-parameter=.
  -Warray-parameter=<0,2>     Warn about mismatched declarations of array parameters and unsafe
                              accesses to them.
  -Warray-temporaries         Warn about creation of array temporaries.
  -Wassign-intercept          Warn whenever an Objective-C assignment is being intercepted by the
                              garbage collector.
  -Wattribute-alias           Warn about type safety and similar errors and mismatches in
                              declarations with alias attributes.  Same as -Wattribute-alias=.
  -Wattribute-alias=<0,2>     Warn about type safety and similar errors and mismatches in
                              declarations with alias attributes.
  -Wattribute-warning         Warn about uses of __attribute__((warning)) declarations.
  -Wattributes                Warn about inappropriate attribute usage.
  -Wbad-function-cast         Warn about casting functions to incompatible types.
  -Wbool-compare              Warn about boolean expression compared with an integer value different
                              from true/false.
  -Wbool-operation            Warn about certain operations on boolean expressions.
  -Wbuiltin-declaration-mismatch Warn when a built-in function is declared with the wrong signature.
  -Wbuiltin-macro-redefined   Warn when a built-in preprocessor macro is undefined or redefined.
  -Wc++-compat                Warn about C constructs that are not in the common subset of C and C++.
  -Wc++0x-compat              Same as -Wc++11-compat.
  -Wc++11-compat              Warn about C++ constructs whose meaning differs between ISO C++ 1998
                              and ISO C++ 2011.
  -Wc++14-compat              Warn about C++ constructs whose meaning differs between ISO C++ 2011
                              and ISO C++ 2014.
  -Wc++17-compat              Warn about C++ constructs whose meaning differs between ISO C++ 2014
                              and ISO C++ 2017.
  -Wc++1z-compat              Same as -Wc++17-compat.
  -Wc++20-compat              Warn about C++ constructs whose meaning differs between ISO C++ 2017
                              and ISO C++ 2020.
  -Wc++2a-compat              Same as -Wc++20-compat.
  -Wc-binding-type            Warn if the type of a variable might be not interoperable with C.
  -Wc11-c2x-compat            Warn about features not present in ISO C11, but present in ISO C2X.
  -Wc90-c99-compat            Warn about features not present in ISO C90, but present in ISO C99.
  -Wc99-c11-compat            Warn about features not present in ISO C99, but present in ISO C11.
  -Wcannot-profile            Warn when profiling instrumentation was requested, but could not be
                              applied to a certain function.
  -Wcast-align                Warn about pointer casts which increase alignment.
  -Wcast-align=strict         Warn about pointer casts which increase alignment.
  -Wcast-function-type        Warn about casts between incompatible function types.
  -Wcast-qual                 Warn about casts which discard qualifiers.
  -Wcast-result               Warn about casts that will produce a null result.
  -Wcatch-value               Warn about catch handlers of non-reference type.  Same as -Wcatch-
                              value=.
  -Wcatch-value=<0,3>         Warn about catch handlers of non-reference type.
  -Wchar-subscripts           Warn about subscripts whose type is "char".
  -Wcharacter-truncation      Warn about truncated character expressions.
  -Wchkp                      Removed in GCC 9.  This switch has no effect.
  -Wclass-conversion          Warn when a conversion function will never be called due to the type it
                              converts to.
  -Wclass-memaccess           Warn for unsafe raw memory writes to objects of class types.
  -Wclobbered                 Warn about variables that might be changed by "longjmp" or "vfork".
  -Wcomma-subscript           Warn about uses of a comma operator within a subscripting expression.
  -Wcomment                   Warn about possibly nested block comments, and C++ comments spanning
                              more than one physical line.
  -Wcomments                  Synonym for -Wcomment.  Same as -Wcomment.
  -Wcompare-reals             Warn about equality comparisons involving REAL or COMPLEX expressions.
  -Wconditionally-supported   Warn for conditionally-supported constructs.
  -Wconversion                Warn for implicit type conversions that may change a value.
  -Wconversion-extra          Warn about most implicit conversions.
  -Wconversion-null           Warn for converting NULL from/to a non-pointer type.
  -Wcoverage-mismatch         Warn in case profiles in -fprofile-use do not match.
  -Wcpp                       Warn when a #warning directive is encountered.
  -Wctad-maybe-unsupported    Warn when performing class template argument deduction on a type with
                              no deduction guides.
  -Wctor-dtor-privacy         Warn when all constructors and destructors are private.
  -Wdangling-else             Warn about dangling else.
  -Wdate-time                 Warn about __TIME__, __DATE__ and __TIMESTAMP__ usage.
  -Wdeclaration-after-statement Warn when a declaration is found after a statement.
  -Wdelete-incomplete         Warn when deleting a pointer to incomplete type.
  -Wdelete-non-virtual-dtor   Warn about deleting polymorphic objects with non-virtual destructors.
  -Wdeprecated                Warn if a deprecated compiler feature, class, method, or field is used.
  -Wdeprecated-copy           Mark implicitly-declared copy operations as deprecated if the class has
                              a user-provided copy operation.
  -Wdeprecated-copy-dtor      Mark implicitly-declared copy operations as deprecated if the class has
                              a user-provided copy operation or destructor.
  -Wdeprecated-declarations   Warn about uses of __attribute__((deprecated)) declarations.
  -Wdeprecated-enum-enum-conversion Warn about deprecated arithmetic conversions on operands of
                              enumeration types.
  -Wdeprecated-enum-float-conversion Warn about deprecated arithmetic conversions on operands where
                              one is of enumeration type and the other is of a floating-point type.
  -Wdesignated-init           Warn about positional initialization of structs requiring designated
                              initializers.
  -Wdisabled-optimization     Warn when an optimization pass is disabled.
  -Wdiscarded-array-qualifiers Warn if qualifiers on arrays which are pointer targets are discarded.
  -Wdiscarded-qualifiers      Warn if type qualifiers on pointers are discarded.
  -Wdiv-by-zero               Warn about compile-time integer division by zero.
  -Wdo-subscript              Warn about possibly incorrect subscripts in do loops.
  -Wdouble-promotion          Warn about implicit conversions from "float" to "double".
  -Wduplicate-decl-specifier  Warn when a declaration has duplicate const, volatile, restrict or
                              _Atomic specifier.
  -Wduplicated-branches       Warn about duplicated branches in if-else statements.
  -Wduplicated-cond           Warn about duplicated conditions in an if-else-if chain.
  -Weffc++                    Warn about violations of Effective C++ style rules.
  -Wempty-body                Warn about an empty body in an if or else statement.
  -Wendif-labels              Warn about stray tokens after #else and #endif.
  -Wenum-compare              Warn about comparison of different enum types.
  -Wenum-conversion           Warn about implicit conversion of enum types.
  -Werror-implicit-function-declaration This switch is deprecated; use -Werror=implicit-function-
                              declaration instead.  Same as -Werror=.
  -Wexceptions                Warn when an exception handler is shadowed by another handler.
  -Wexpansion-to-defined      Warn if "defined" is used outside #if.
  -Wextra                     Print extra (possibly unwanted) warnings.
  -Wextra-semi                Warn about semicolon after in-class function definition.
  -Wfloat-conversion          Warn for implicit type conversions that cause loss of floating point
                              precision.
  -Wfloat-equal               Warn if testing floating point numbers for equality.
  -Wformat                    Warn about printf/scanf/strftime/strfmon format string anomalies.  Same
                              as -Wformat=.
  -Wformat-contains-nul       Warn about format strings that contain NUL bytes.
  -Wformat-diag               Warn about GCC format strings with strings unsuitable for diagnostics.
  -Wformat-extra-args         Warn if passing too many arguments to a function for its format string.
  -Wformat-nonliteral         Warn about format strings that are not literals.
  -Wformat-overflow<0,2>      Warn about function calls with format strings that write past the end
                              of the destination region.  Same as -Wformat-overflow=1.  Same as
                              -Wformat-overflow=.
  -Wformat-overflow=<0,2>     Warn about function calls with format strings that write past the end
                              of the destination region.
  -Wformat-security           Warn about possible security problems with format functions.
  -Wformat-signedness         Warn about sign differences with format functions.
  -Wformat-truncation         Warn about calls to snprintf and similar functions that truncate
                              output. Same as -Wformat-truncation=1.  Same as -Wformat-truncation=.
  -Wformat-truncation=<0,2>   Warn about calls to snprintf and similar functions that truncate output.
  -Wformat-y2k                Warn about strftime formats yielding 2-digit years.
  -Wformat-zero-length        Warn about zero-length formats.
  -Wformat=<0,2>              Warn about printf/scanf/strftime/strfmon format string anomalies.
  -Wframe-address             Warn when __builtin_frame_address or __builtin_return_address is used
                              unsafely.
  -Wframe-larger-than=<byte-size> Warn if a function's stack frame requires in excess of <byte-size>.
  -Wfree-nonheap-object       Warn when attempting to free a non-heap object.
  -Wfunction-elimination      Warn about function call elimination.
  -Whsa                       Does nothing.  Preserved for backward compatibility.
  -Wif-not-aligned            Warn when the field in a struct is not aligned.
  -Wignored-attributes        Warn whenever attributes are ignored.
  -Wignored-qualifiers        Warn whenever type qualifiers are ignored.
  -Wimplicit                  Warn about implicit declarations.
  -Wimplicit-fallthrough      Same as -Wimplicit-fallthrough=3 (or, in negated form, -Wimplicit-
                              fallthrough=0).
  -Wimplicit-fallthrough=<0,5> Warn when a switch case falls through.
  -Wimplicit-function-declaration Warn about implicit function declarations.
  -Wimplicit-int              Warn when a declaration does not specify a type.
  -Wimplicit-interface        Warn about calls with implicit interface.
  -Wimplicit-procedure        Warn about called procedures not explicitly declared.
  -Winaccessible-base         Warn when a base is inaccessible in derived due to ambiguity.
  -Wincompatible-pointer-types Warn when there is a conversion between pointers that have
                              incompatible types.
  -Winherited-variadic-ctor   Warn about C++11 inheriting constructors when the base has a variadic
                              constructor.
  -Winit-list-lifetime        Warn about uses of std::initializer_list that can result in dangling
                              pointers.
  -Winit-self                 Warn about variables which are initialized to themselves.
  -Winline                    Warn when an inlined function cannot be inlined.
  -Wint-conversion            Warn about incompatible integer to pointer and pointer to integer
                              conversions.
  -Wint-in-bool-context       Warn for suspicious integer expressions in boolean context.
  -Wint-to-pointer-cast       Warn when there is a cast to a pointer from an integer of a different
                              size.
  -Winteger-division          Warn about constant integer divisions with truncated results.
  -Wintrinsic-shadow          Warn if a user-procedure has the same name as an intrinsic.
  -Wintrinsics-std            Warn on intrinsics not part of the selected standard.
  -Winvalid-imported-macros   Warn about macros that have conflicting header units definitions.
  -Winvalid-memory-model      Warn when an atomic memory model parameter is known to be outside the
                              valid range.
  -Winvalid-offsetof          Warn about invalid uses of the "offsetof" macro.
  -Winvalid-pch               Warn about PCH files that are found but not used.
  -Wjump-misses-init          Warn when a jump misses a variable initialization.
  -Wlarger-than-              Same as -Wlarger-than=.
  -Wlarger-than=<byte-size>   Warn if an object's size exceeds <byte-size>.
  -Wline-truncation           Warn about truncated source lines.
  -Wliteral-suffix            Warn when a string or character literal is followed by a ud-suffix
                              which does not begin with an underscore.
  -Wlogical-not-parentheses   Warn when logical not is used on the left hand side operand of a
                              comparison.
  -Wlogical-op                Warn when a logical operator is suspiciously always evaluating to true
                              or false.
  -Wlong-long                 Do not warn about using "long long" when -pedantic.
  -Wlto-type-mismatch         During link time optimization warn about mismatched types of global
                              declarations.
  -Wmain                      Warn about suspicious declarations of "main".
  -Wmaybe-uninitialized       Warn about maybe uninitialized automatic variables.
  -Wmemset-elt-size           Warn about suspicious calls to memset where the third argument contains
                              the number of elements not multiplied by the element size.
  -Wmemset-transposed-args    Warn about suspicious calls to memset where the third argument is
                              constant literal zero and the second is not.
  -Wmisleading-indentation    Warn when the indentation of the code does not reflect the block
                              structure.
  -Wmismatched-dealloc        Warn for deallocation calls with arguments returned from mismatched
                              allocation functions.
  -Wmismatched-new-delete     Warn for mismatches between calls to operator new or delete and the
                              corresponding call to the allocation or deallocation function.
  -Wmismatched-tags           Warn when a class is redeclared or referenced using a mismatched class-
                              key.
  -Wmissing-attributes        Warn about declarations of entities that may be missing attributes that
                              related entities have been declared with.
  -Wmissing-braces            Warn about possibly missing braces around initializers.
  -Wmissing-declarations      Warn about global functions without previous declarations.
  -Wmissing-field-initializers Warn about missing fields in struct initializers.
  -Wmissing-format-attribute  Same as -Wsuggest-attribute=format.
  -Wmissing-include-dirs      Warn about user-specified include directories that do not exist.
  -Wmissing-noreturn          Same as -Wsuggest-attribute=noreturn.
  -Wmissing-parameter-type    Warn about function parameters declared without a type specifier in K&R-
                              style functions.
  -Wmissing-profile           Warn in case profiles in -fprofile-use do not exist.
  -Wmissing-prototypes        Warn about global functions without prototypes.
  -Wmultichar                 Warn about use of multi-character character constants.
  -Wmultiple-inheritance      Warn on direct multiple inheritance.
  -Wmultistatement-macros     Warn about unsafe macros expanding to multiple statements used as a
                              body of a clause such as if, else, while, switch, or for.
  -Wnamespaces                Warn on namespace definition.
  -Wnarrowing                 Warn about narrowing conversions within { } that are ill-formed in
                              C++11.
  -Wnested-externs            Warn about "extern" declarations not at file scope.
  -Wno-alloc-size-larger-than Disable Walloc-size-larger-than= warning.  Equivalent to Walloc-size-
                              larger-than=<SIZE_MAX> or larger.  Same as -Walloc-size-larger-than=.
  -Wno-alloca-larger-than     Disable Walloca-larger-than= warning.  Equivalent to Walloca-larger-
                              than=<SIZE_MAX> or larger.  Same as -Walloca-larger-than=.
  -Wno-frame-larger-than      Disable -Wframe-larger-than= warning.  Equivalent to -Wframe-larger-
                              than=<SIZE_MAX> or larger.  Same as -Wframe-larger-than=.
  -Wno-larger-than            Disable -Wlarger-than= warning.  Equivalent to -Wlarger-than=<SIZE_MAX>
                              or larger.  Same as -Wlarger-than=.
  -Wno-stack-usage            Disable Wstack-usage= warning.  Equivalent to Wstack-usage=<SIZE_MAX>
                              or larger.  Same as -Wstack-usage=.
  -Wno-vla-larger-than        Disable Wvla-larger-than= warning.  Equivalent to Wvla-larger-
                              than=<SIZE_MAX> or larger.  Same as -Wvla-larger-than=.
  -Wnoexcept                  Warn when a noexcept expression evaluates to false even though the
                              expression can't actually throw.
  -Wnoexcept-type             Warn if C++17 noexcept function type will change the mangled name of a
                              symbol.
  -Wnon-template-friend       Warn when non-templatized friend functions are declared within a
                              template.
  -Wnon-virtual-dtor          Warn about non-virtual destructors.
  -Wnonnull                   Warn about NULL being passed to argument slots marked as requiring non-
                              NULL.
  -Wnonnull-compare           Warn if comparing pointer parameter with nonnull attribute with NULL.
  -Wnormalized                Same as -Wnormalized=nfc (or, in negated form, -Wnormalized=none).
  -Wnormalized=[none|id|nfc|nfkc] Warn about non-normalized Unicode strings.
  -Wnull-dereference          Warn if dereferencing a NULL pointer may lead to erroneous or undefined
                              behavior.
  -Wobjc-root-class           Warn if a class interface has no superclass.  Root classes may use an
                              attribute to suppress this warning.
  -Wodr                       Warn about some C++ One Definition Rule violations during link time
                              optimization.
  -Wold-style-cast            Warn if a C-style cast is used in a program.
  -Wold-style-declaration     Warn for obsolescent usage in a declaration.
  -Wold-style-definition      Warn if an old-style parameter definition is used.
  -Wopenmp-simd               Warn if a simd directive is overridden by the vectorizer cost model.
  -Woverflow                  Warn about overflow in arithmetic expressions.
  -Woverlength-strings        Warn if a string is longer than the maximum portable length specified
                              by the standard.
  -Woverloaded-virtual        Warn about overloaded virtual function names.
  -Woverride-init             Warn about overriding initializers without side effects.
  -Woverride-init-side-effects Warn about overriding initializers with side effects.
  -Woverwrite-recursive       Warn that -fno-automatic may break recursion.
  -Wpacked                    Warn when the packed attribute has no effect on struct layout.
  -Wpacked-bitfield-compat    Warn about packed bit-fields whose offset changed in GCC 4.4.
  -Wpacked-not-aligned        Warn when fields in a struct with the packed attribute are misaligned.
  -Wpadded                    Warn when padding is required to align structure members.
  -Wparentheses               Warn about possibly missing parentheses.
  -Wpedantic                  Issue warnings needed for strict compliance to the standard.
  -Wpessimizing-move          Warn about calling std::move on a local object in a return statement
                              preventing copy elision.
  -Wplacement-new             Warn for placement new expressions with undefined behavior.  Same as
                              -Wplacement-new=.
  -Wplacement-new=<0,2>       Warn for placement new expressions with undefined behavior.
  -Wpmf-conversions           Warn when converting the type of pointers to member functions.
  -Wpointer-arith             Warn about function pointer arithmetic.
  -Wpointer-compare           Warn when a pointer is compared with a zero character constant.
  -Wpointer-sign              Warn when a pointer differs in signedness in an assignment.
  -Wpointer-to-int-cast       Warn when a pointer is cast to an integer of a different size.
  -Wpragmas                   Warn about misuses of pragmas.
  -Wprio-ctor-dtor            Warn if constructor or destructors with priorities from 0 to 100 are
                              used.
  -Wproperty-assign-default   Warn if a property for an Objective-C object has no assign semantics
                              specified.
  -Wprotocol                  Warn if inherited methods are unimplemented.
  -Wpsabi                     This option lacks documentation.
  -Wrange-loop-construct      Warn when a range-based for-loop is creating unnecessary copies.
  -Wreal-q-constant           Warn about real-literal-constants with 'q' exponent-letter.
  -Wrealloc-lhs               Warn when a left-hand-side array variable is reallocated.
  -Wrealloc-lhs-all           Warn when a left-hand-side variable is reallocated.
  -Wredundant-decls           Warn about multiple declarations of the same object.
  -Wredundant-move            Warn about redundant calls to std::move.
  -Wredundant-tags            Warn when a class or enumerated type is referenced using a redundant
                              class-key.
  -Wregister                  Warn about uses of register storage specifier.
  -Wreorder                   Warn when the compiler reorders code.
  -Wrestrict                  Warn when an argument passed to a restrict-qualified parameter aliases
                              with another argument.
  -Wreturn-local-addr         Warn about returning a pointer/reference to a local or temporary
                              variable.
  -Wreturn-type               Warn whenever a function's return type defaults to "int" (C), or about
                              inconsistent return types (C++).
  -Wscalar-storage-order      Warn on suspicious constructs involving reverse scalar storage order.
  -Wselector                  Warn if a selector has multiple methods.
  -Wsequence-point            Warn about possible violations of sequence point rules.
  -Wshadow                    Warn when one variable shadows another.  Same as -Wshadow=global.
  -Wshadow-compatible-local   Same as -Wshadow=compatible-local.
  -Wshadow-ivar               Warn if a local declaration hides an instance variable.
  -Wshadow-local              Same as -Wshadow=local.
  -Wshadow=compatible-local   Warn when one local variable shadows another local variable or
                              parameter of compatible type.
  -Wshadow=global             Warn when one variable shadows another (globally).  Same as -Wshadow.
  -Wshadow=local              Warn when one local variable shadows another local variable or
                              parameter.
  -Wshift-count-negative      Warn if shift count is negative.
  -Wshift-count-overflow      Warn if shift count >= width of type.
  -Wshift-negative-value      Warn if left shifting a negative value.
  -Wshift-overflow            Warn if left shift of a signed value overflows.  Same as -Wshift-
                              overflow=.
  -Wshift-overflow=<0,2>      Warn if left shift of a signed value overflows.
  -Wsign-compare              Warn about signed-unsigned comparisons.
  -Wsign-conversion           Warn for implicit type conversions between signed and unsigned integers.
  -Wsign-promo                Warn when overload promotes from unsigned to signed.
  -Wsized-deallocation        Warn about missing sized deallocation functions.
  -Wsizeof-array-argument     Warn when sizeof is applied on a parameter declared as an array.
  -Wsizeof-array-div          Warn about divisions of two sizeof operators when the first one is
                              applied to an array and the divisor does not equal the size of the
                              array element.
  -Wsizeof-pointer-div        Warn about suspicious divisions of two sizeof expressions that don't
                              work correctly with pointers.
  -Wsizeof-pointer-memaccess  Warn about suspicious length parameters to certain string functions if
                              the argument uses sizeof.
  -Wstack-protector           Warn when not issuing stack smashing protection for some reason.
  -Wstack-usage=<byte-size>   Warn if stack usage might exceed <byte-size>.
  -Wstrict-aliasing           Warn about code which might break strict aliasing rules.
  -Wstrict-aliasing=<0,3>     Warn about code which might break strict aliasing rules.
  -Wstrict-null-sentinel      Warn about uncasted NULL used as sentinel.
  -Wstrict-overflow           Warn about optimizations that assume that signed overflow is undefined.
  -Wstrict-overflow=<0,5>     Warn about optimizations that assume that signed overflow is undefined.
  -Wstrict-prototypes         Warn about unprototyped function declarations.
  -Wstrict-selector-match     Warn if type signatures of candidate methods do not match exactly.
  -Wstring-compare            Warn about calls to strcmp and strncmp used in equality expressions
                              that are necessarily true or false due to the length of one and size of
                              the other argument.
  -Wstringop-overflow         Warn about buffer overflow in string manipulation functions like memcpy
                              and strcpy.  Same as -Wstringop-overflow=.
  -Wstringop-overflow=<0,4>   Under the control of Object Size type, warn about buffer overflow in
                              string manipulation functions like memcpy and strcpy.
  -Wstringop-overread         Warn about reading past the end of a source array in string
                              manipulation functions like memchr and memcpy.
  -Wstringop-truncation       Warn about truncation in string manipulation functions like strncat and
                              strncpy.
  -Wsubobject-linkage         Warn if a class type has a base or a field whose type uses the
                              anonymous namespace or depends on a type with no linkage.
  -Wsuggest-attribute=cold    Warn about functions which might be candidates for
                              __attribute__((cold)).
  -Wsuggest-attribute=const   Warn about functions which might be candidates for
                              __attribute__((const)).
  -Wsuggest-attribute=format  Warn about functions which might be candidates for format attributes.
  -Wsuggest-attribute=malloc  Warn about functions which might be candidates for
                              __attribute__((malloc)).
  -Wsuggest-attribute=noreturn Warn about functions which might be candidates for
                              __attribute__((noreturn)).
  -Wsuggest-attribute=pure    Warn about functions which might be candidates for
                              __attribute__((pure)).
  -Wsuggest-final-methods     Warn about C++ virtual methods where adding final keyword would improve
                              code quality.
  -Wsuggest-final-types       Warn about C++ polymorphic types where adding final keyword would
                              improve code quality.
  -Wsuggest-override          Suggest that the override keyword be used when the declaration of a
                              virtual function overrides another.
  -Wsurprising                Warn about "suspicious" constructs.
  -Wswitch                    Warn about enumerated switches, with no default, missing a case.
  -Wswitch-bool               Warn about switches with boolean controlling expression.
  -Wswitch-default            Warn about enumerated switches missing a "default:" statement.
  -Wswitch-enum               Warn about all enumerated switches missing a specific case.
  -Wswitch-outside-range      Warn about switch values that are outside of the switch's type range.
  -Wswitch-unreachable        Warn about statements between switch's controlling expression and the
                              first case.
  -Wsync-nand                 Warn when __sync_fetch_and_nand and __sync_nand_and_fetch built-in
                              functions are used.
  -Wsynth                     Deprecated.  This switch has no effect.
  -Wsystem-headers            Do not suppress warnings from system headers.
  -Wtabs                      Permit nonconforming uses of the tab character.
  -Wtarget-lifetime           Warn if the pointer in a pointer assignment might outlive its target.
  -Wtautological-compare      Warn if a comparison always evaluates to true or false.
  -Wtemplates                 Warn on primary template declaration.
  -Wterminate                 Warn if a throw expression will always result in a call to terminate().
  -Wtraditional               Warn about features not present in traditional C.
  -Wtraditional-conversion    Warn of prototypes causing type conversions different from what would
                              happen in the absence of prototype.
  -Wtrampolines               Warn whenever a trampoline is generated.
  -Wtrigraphs                 Warn if trigraphs are encountered that might affect the meaning of the
                              program.
  -Wtsan                      Warn about unsupported features in ThreadSanitizer.
  -Wtype-limits               Warn if a comparison is always true or always false due to the limited
                              range of the data type.
  -Wundeclared-selector       Warn about @selector()s without previously declared methods.
  -Wundef                     Warn if an undefined macro is used in an #if directive.
  -Wundefined-do-loop         Warn about an invalid DO loop.
  -Wunderflow                 Warn about underflow of numerical constant expressions.
  -Wuninitialized             Warn about uninitialized automatic variables.
  -Wunknown-pragmas           Warn about unrecognized pragmas.
  -Wunreachable-code          Does nothing. Preserved for backward compatibility.
  -Wunsafe-loop-optimizations Does nothing. Preserved for backward compatibility.
  -Wunsuffixed-float-constants Warn about unsuffixed float constants.
  -Wunused                    Enable all -Wunused- warnings.
  -Wunused-but-set-parameter  Warn when a function parameter is only set, otherwise unused.
  -Wunused-but-set-variable   Warn when a variable is only set, otherwise unused.
  -Wunused-const-variable     Warn when a const variable is unused.  Same as -Wunused-const-variable=.
  -Wunused-const-variable=<0,2> Warn when a const variable is unused.
  -Wunused-dummy-argument     Warn about unused dummy arguments.
  -Wunused-function           Warn when a function is unused.
  -Wunused-label              Warn when a label is unused.
  -Wunused-local-typedefs     Warn when typedefs locally defined in a function are not used.
  -Wunused-macros             Warn about macros defined in the main file that are not used.
  -Wunused-parameter          Warn when a function parameter is unused.
  -Wunused-result             Warn if a caller of a function, marked with attribute
                              warn_unused_result, does not use its return value.
  -Wunused-value              Warn when an expression value is unused.
  -Wunused-variable           Warn when a variable is unused.
  -Wuse-without-only          Warn about USE statements that have no ONLY qualifier.
  -Wuseless-cast              Warn about useless casts.
  -Wvarargs                   Warn about questionable usage of the macros used to retrieve variable
                              arguments.
  -Wvariadic-macros           Warn about using variadic macros.
  -Wvector-operation-performance Warn when a vector operation is compiled outside the SIMD.
  -Wvexing-parse              Warn about the most vexing parse syntactic ambiguity.
  -Wvirtual-inheritance       Warn on direct virtual inheritance.
  -Wvirtual-move-assign       Warn if a virtual base has a non-trivial move assignment operator.
  -Wvla                       Warn if a variable length array is used.
  -Wvla-larger-than=<number>  Warn on unbounded uses of variable-length arrays, and on bounded uses
                              of variable-length arrays whose bound can be larger than <number> bytes.
  -Wvla-parameter             Warn about mismatched declarations of VLA parameters.
  -Wvolatile                  Warn about deprecated uses of volatile qualifier.
  -Wvolatile-register-var     Warn when a register variable is declared volatile.
  -Wwrite-strings             In C++, nonzero means warn about deprecated conversion from string
                              literals to 'char *'.  In C, similar warning, except that the
                              conversion is of course not deprecated by the ISO C standard.
  -Wzero-as-null-pointer-constant Warn when a literal '0' is used as null pointer.
  -Wzero-length-bounds        Warn about accesses to interior zero-length array members.
  -Wzerotrip                  Warn about zero-trip DO loops.
  -frequire-return-statement  Functions which return values must end with return statements.

